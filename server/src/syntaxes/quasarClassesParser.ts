/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* quasarClasse := A | B | C | D | E | F | H | I | L | M | N | O | P | R | S | T | V | W | X | Z
* A := 'absolute'$ | 'absolute-center'$ | 'absolute-top'$ | 'absolute-right'$ | 'absolute-bottom'$ | 'absolute-left'$ | 'absolute-top-left'$ | 'absolute-top-right'$ | 'absolute-bottom-left'$ | 'absolute-bottom-right'$ | 'absolute-full'$ | 'all-pointer-events'$
* B := 'block'$
* C := 'cordova-only'$ | 'capacitor-only'$ | 'cordova-hide'$ | 'capacitor-hide'$ | 'cursor-pointer'$
* D := 'disabled'$ | 'desktop-only'$ | 'desktop-hide'$
* E := 'ellipsis'$ | 'ellipsis-2-lines'$ | 'ellipsis-3-lines'$ | 'electron-only'$ | 'electron-hide'$
* F := 'fullscreen'$ | 'fixed'$ | 'fixed-center'$ | 'fixed-top'$ | 'fixed-right'$ | 'fixed-bottom'$ | 'fixed-left'$ | 'fixed-top-left'$ | 'fixed-top-right'$ | 'fixed-bottom-left'$ | 'fixed-bottom-right'$ | 'fixed-full'$ | 'float-left'$ | 'float-right'$ | 'fit'$ | 'full-height'$ | 'full-width'$ | 'flip-horizontal'$ | 'flip-vertical'$
* H := 'hoverable'$ | 'hoverable-1'$ | 'hoverable-2'$ | 'hoverable-3'$ | 'hoverable-4'$ | 'hoverable-5'$ | 'hoverable-up'$ | 'hoverable-up-1'$ | 'hoverable-up-2'$ | 'hoverable-up-3'$ | 'hoverable-up-4'$ | 'hoverable-up-5'$ | 'hidden'$
* I := 'inset-shadow'$ | 'invisible'$
* L := 'light-dimmed'$ | 'lg'$
* M := 'md'$ | 'mobile-only'$ | 'mobile-hide'$
* N := 'no-shadow'$ | 'native-mobile-only'$ | 'native-mobile-hide'$ | 'non-selectable'$ | 'no-scroll'$ | 'no-pointer-events'$ | 'no-border'$ | 'no-margin'$ | 'no-padding'$
* O := 'on-left'$ | 'on-right'$ | 'orientation-portrait'$ | 'orientation-landscape'$
* P := 'properties'$ | 'platform-ios-only'$ | 'platform-android-only'$ | 'platform-ios-hide'$ | 'platform-android-hide'$ | 'print-only'$ | 'print-hide'$
* R := 'rotate-90'$ | 'rotate-180'$ | 'rotate-270'$ | 'round-borders'$
* S := 'shadow-1'$ | 'shadow-2'$ | 'shadow-3'$ | 'shadow-4'$ | 'shadow-5'$ | 'shadow-transition'$ | 'shadow-up-1'$ | 'shadow-up-2'$ | 'shadow-up-3'$ | 'shadow-up-4'$ | 'shadow-up-5'$ | 'sm'$ | 'scrollplatforms'$
* T := 'transparent'$ | 'touch-only'$ | 'touch-hide'$ | 'text-right'$ | 'text-left'$ | 'text-center'$ | 'text-justify'$ | 'text-bold'$ | 'text-italic'$ | 'text-no-wrap'$ | 'text-strike'$ | 'text-uppercase'$ | 'text-lowercase'$ | 'text-capitalize'$
* V := 'vertical-top'$ | 'vertical-middle'$ | 'vertical-bottom'$ 
* W := 'within-iframe-only'$ | 'within-iframe-hide'$ | 'window-height'$ | 'window-width'$
* X := 'xs'$ | 'xl'$
* Z := 'z-top'$ | 'z-max'$
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    quasarClasse_1 = "quasarClasse_1",
    quasarClasse_2 = "quasarClasse_2",
    quasarClasse_3 = "quasarClasse_3",
    quasarClasse_4 = "quasarClasse_4",
    quasarClasse_5 = "quasarClasse_5",
    quasarClasse_6 = "quasarClasse_6",
    quasarClasse_7 = "quasarClasse_7",
    quasarClasse_8 = "quasarClasse_8",
    quasarClasse_9 = "quasarClasse_9",
    quasarClasse_10 = "quasarClasse_10",
    quasarClasse_11 = "quasarClasse_11",
    quasarClasse_12 = "quasarClasse_12",
    quasarClasse_13 = "quasarClasse_13",
    quasarClasse_14 = "quasarClasse_14",
    quasarClasse_15 = "quasarClasse_15",
    quasarClasse_16 = "quasarClasse_16",
    quasarClasse_17 = "quasarClasse_17",
    quasarClasse_18 = "quasarClasse_18",
    quasarClasse_19 = "quasarClasse_19",
    quasarClasse_20 = "quasarClasse_20",
    A_1 = "A_1",
    A_2 = "A_2",
    A_3 = "A_3",
    A_4 = "A_4",
    A_5 = "A_5",
    A_6 = "A_6",
    A_7 = "A_7",
    A_8 = "A_8",
    A_9 = "A_9",
    A_10 = "A_10",
    A_11 = "A_11",
    A_12 = "A_12",
    B = "B",
    C_1 = "C_1",
    C_2 = "C_2",
    C_3 = "C_3",
    C_4 = "C_4",
    C_5 = "C_5",
    D_1 = "D_1",
    D_2 = "D_2",
    D_3 = "D_3",
    E_1 = "E_1",
    E_2 = "E_2",
    E_3 = "E_3",
    E_4 = "E_4",
    E_5 = "E_5",
    F_1 = "F_1",
    F_2 = "F_2",
    F_3 = "F_3",
    F_4 = "F_4",
    F_5 = "F_5",
    F_6 = "F_6",
    F_7 = "F_7",
    F_8 = "F_8",
    F_9 = "F_9",
    F_10 = "F_10",
    F_11 = "F_11",
    F_12 = "F_12",
    F_13 = "F_13",
    F_14 = "F_14",
    F_15 = "F_15",
    F_16 = "F_16",
    F_17 = "F_17",
    F_18 = "F_18",
    F_19 = "F_19",
    H_1 = "H_1",
    H_2 = "H_2",
    H_3 = "H_3",
    H_4 = "H_4",
    H_5 = "H_5",
    H_6 = "H_6",
    H_7 = "H_7",
    H_8 = "H_8",
    H_9 = "H_9",
    H_10 = "H_10",
    H_11 = "H_11",
    H_12 = "H_12",
    H_13 = "H_13",
    I_1 = "I_1",
    I_2 = "I_2",
    L_1 = "L_1",
    L_2 = "L_2",
    M_1 = "M_1",
    M_2 = "M_2",
    M_3 = "M_3",
    N_1 = "N_1",
    N_2 = "N_2",
    N_3 = "N_3",
    N_4 = "N_4",
    N_5 = "N_5",
    N_6 = "N_6",
    N_7 = "N_7",
    N_8 = "N_8",
    N_9 = "N_9",
    O_1 = "O_1",
    O_2 = "O_2",
    O_3 = "O_3",
    O_4 = "O_4",
    P_1 = "P_1",
    P_2 = "P_2",
    P_3 = "P_3",
    P_4 = "P_4",
    P_5 = "P_5",
    P_6 = "P_6",
    P_7 = "P_7",
    R_1 = "R_1",
    R_2 = "R_2",
    R_3 = "R_3",
    R_4 = "R_4",
    S_1 = "S_1",
    S_2 = "S_2",
    S_3 = "S_3",
    S_4 = "S_4",
    S_5 = "S_5",
    S_6 = "S_6",
    S_7 = "S_7",
    S_8 = "S_8",
    S_9 = "S_9",
    S_10 = "S_10",
    S_11 = "S_11",
    S_12 = "S_12",
    S_13 = "S_13",
    T_1 = "T_1",
    T_2 = "T_2",
    T_3 = "T_3",
    T_4 = "T_4",
    T_5 = "T_5",
    T_6 = "T_6",
    T_7 = "T_7",
    T_8 = "T_8",
    T_9 = "T_9",
    T_10 = "T_10",
    T_11 = "T_11",
    T_12 = "T_12",
    T_13 = "T_13",
    T_14 = "T_14",
    V_1 = "V_1",
    V_2 = "V_2",
    V_3 = "V_3",
    W_1 = "W_1",
    W_2 = "W_2",
    W_3 = "W_3",
    W_4 = "W_4",
    X_1 = "X_1",
    X_2 = "X_2",
    Z_1 = "Z_1",
    Z_2 = "Z_2",
    $EOF = "$EOF",
}
export type quasarClasse = quasarClasse_1 | quasarClasse_2 | quasarClasse_3 | quasarClasse_4 | quasarClasse_5 | quasarClasse_6 | quasarClasse_7 | quasarClasse_8 | quasarClasse_9 | quasarClasse_10 | quasarClasse_11 | quasarClasse_12 | quasarClasse_13 | quasarClasse_14 | quasarClasse_15 | quasarClasse_16 | quasarClasse_17 | quasarClasse_18 | quasarClasse_19 | quasarClasse_20;
export type quasarClasse_1 = A;
export type quasarClasse_2 = B;
export type quasarClasse_3 = C;
export type quasarClasse_4 = D;
export type quasarClasse_5 = E;
export type quasarClasse_6 = F;
export type quasarClasse_7 = H;
export type quasarClasse_8 = I;
export type quasarClasse_9 = L;
export type quasarClasse_10 = M;
export type quasarClasse_11 = N;
export type quasarClasse_12 = O;
export type quasarClasse_13 = P;
export type quasarClasse_14 = R;
export type quasarClasse_15 = S;
export type quasarClasse_16 = T;
export type quasarClasse_17 = V;
export type quasarClasse_18 = W;
export type quasarClasse_19 = X;
export type quasarClasse_20 = Z;
export type A = A_1 | A_2 | A_3 | A_4 | A_5 | A_6 | A_7 | A_8 | A_9 | A_10 | A_11 | A_12;
export interface A_1 {
    kind: ASTKinds.A_1;
}
export interface A_2 {
    kind: ASTKinds.A_2;
}
export interface A_3 {
    kind: ASTKinds.A_3;
}
export interface A_4 {
    kind: ASTKinds.A_4;
}
export interface A_5 {
    kind: ASTKinds.A_5;
}
export interface A_6 {
    kind: ASTKinds.A_6;
}
export interface A_7 {
    kind: ASTKinds.A_7;
}
export interface A_8 {
    kind: ASTKinds.A_8;
}
export interface A_9 {
    kind: ASTKinds.A_9;
}
export interface A_10 {
    kind: ASTKinds.A_10;
}
export interface A_11 {
    kind: ASTKinds.A_11;
}
export interface A_12 {
    kind: ASTKinds.A_12;
}
export interface B {
    kind: ASTKinds.B;
}
export type C = C_1 | C_2 | C_3 | C_4 | C_5;
export interface C_1 {
    kind: ASTKinds.C_1;
}
export interface C_2 {
    kind: ASTKinds.C_2;
}
export interface C_3 {
    kind: ASTKinds.C_3;
}
export interface C_4 {
    kind: ASTKinds.C_4;
}
export interface C_5 {
    kind: ASTKinds.C_5;
}
export type D = D_1 | D_2 | D_3;
export interface D_1 {
    kind: ASTKinds.D_1;
}
export interface D_2 {
    kind: ASTKinds.D_2;
}
export interface D_3 {
    kind: ASTKinds.D_3;
}
export type E = E_1 | E_2 | E_3 | E_4 | E_5;
export interface E_1 {
    kind: ASTKinds.E_1;
}
export interface E_2 {
    kind: ASTKinds.E_2;
}
export interface E_3 {
    kind: ASTKinds.E_3;
}
export interface E_4 {
    kind: ASTKinds.E_4;
}
export interface E_5 {
    kind: ASTKinds.E_5;
}
export type F = F_1 | F_2 | F_3 | F_4 | F_5 | F_6 | F_7 | F_8 | F_9 | F_10 | F_11 | F_12 | F_13 | F_14 | F_15 | F_16 | F_17 | F_18 | F_19;
export interface F_1 {
    kind: ASTKinds.F_1;
}
export interface F_2 {
    kind: ASTKinds.F_2;
}
export interface F_3 {
    kind: ASTKinds.F_3;
}
export interface F_4 {
    kind: ASTKinds.F_4;
}
export interface F_5 {
    kind: ASTKinds.F_5;
}
export interface F_6 {
    kind: ASTKinds.F_6;
}
export interface F_7 {
    kind: ASTKinds.F_7;
}
export interface F_8 {
    kind: ASTKinds.F_8;
}
export interface F_9 {
    kind: ASTKinds.F_9;
}
export interface F_10 {
    kind: ASTKinds.F_10;
}
export interface F_11 {
    kind: ASTKinds.F_11;
}
export interface F_12 {
    kind: ASTKinds.F_12;
}
export interface F_13 {
    kind: ASTKinds.F_13;
}
export interface F_14 {
    kind: ASTKinds.F_14;
}
export interface F_15 {
    kind: ASTKinds.F_15;
}
export interface F_16 {
    kind: ASTKinds.F_16;
}
export interface F_17 {
    kind: ASTKinds.F_17;
}
export interface F_18 {
    kind: ASTKinds.F_18;
}
export interface F_19 {
    kind: ASTKinds.F_19;
}
export type H = H_1 | H_2 | H_3 | H_4 | H_5 | H_6 | H_7 | H_8 | H_9 | H_10 | H_11 | H_12 | H_13;
export interface H_1 {
    kind: ASTKinds.H_1;
}
export interface H_2 {
    kind: ASTKinds.H_2;
}
export interface H_3 {
    kind: ASTKinds.H_3;
}
export interface H_4 {
    kind: ASTKinds.H_4;
}
export interface H_5 {
    kind: ASTKinds.H_5;
}
export interface H_6 {
    kind: ASTKinds.H_6;
}
export interface H_7 {
    kind: ASTKinds.H_7;
}
export interface H_8 {
    kind: ASTKinds.H_8;
}
export interface H_9 {
    kind: ASTKinds.H_9;
}
export interface H_10 {
    kind: ASTKinds.H_10;
}
export interface H_11 {
    kind: ASTKinds.H_11;
}
export interface H_12 {
    kind: ASTKinds.H_12;
}
export interface H_13 {
    kind: ASTKinds.H_13;
}
export type I = I_1 | I_2;
export interface I_1 {
    kind: ASTKinds.I_1;
}
export interface I_2 {
    kind: ASTKinds.I_2;
}
export type L = L_1 | L_2;
export interface L_1 {
    kind: ASTKinds.L_1;
}
export interface L_2 {
    kind: ASTKinds.L_2;
}
export type M = M_1 | M_2 | M_3;
export interface M_1 {
    kind: ASTKinds.M_1;
}
export interface M_2 {
    kind: ASTKinds.M_2;
}
export interface M_3 {
    kind: ASTKinds.M_3;
}
export type N = N_1 | N_2 | N_3 | N_4 | N_5 | N_6 | N_7 | N_8 | N_9;
export interface N_1 {
    kind: ASTKinds.N_1;
}
export interface N_2 {
    kind: ASTKinds.N_2;
}
export interface N_3 {
    kind: ASTKinds.N_3;
}
export interface N_4 {
    kind: ASTKinds.N_4;
}
export interface N_5 {
    kind: ASTKinds.N_5;
}
export interface N_6 {
    kind: ASTKinds.N_6;
}
export interface N_7 {
    kind: ASTKinds.N_7;
}
export interface N_8 {
    kind: ASTKinds.N_8;
}
export interface N_9 {
    kind: ASTKinds.N_9;
}
export type O = O_1 | O_2 | O_3 | O_4;
export interface O_1 {
    kind: ASTKinds.O_1;
}
export interface O_2 {
    kind: ASTKinds.O_2;
}
export interface O_3 {
    kind: ASTKinds.O_3;
}
export interface O_4 {
    kind: ASTKinds.O_4;
}
export type P = P_1 | P_2 | P_3 | P_4 | P_5 | P_6 | P_7;
export interface P_1 {
    kind: ASTKinds.P_1;
}
export interface P_2 {
    kind: ASTKinds.P_2;
}
export interface P_3 {
    kind: ASTKinds.P_3;
}
export interface P_4 {
    kind: ASTKinds.P_4;
}
export interface P_5 {
    kind: ASTKinds.P_5;
}
export interface P_6 {
    kind: ASTKinds.P_6;
}
export interface P_7 {
    kind: ASTKinds.P_7;
}
export type R = R_1 | R_2 | R_3 | R_4;
export interface R_1 {
    kind: ASTKinds.R_1;
}
export interface R_2 {
    kind: ASTKinds.R_2;
}
export interface R_3 {
    kind: ASTKinds.R_3;
}
export interface R_4 {
    kind: ASTKinds.R_4;
}
export type S = S_1 | S_2 | S_3 | S_4 | S_5 | S_6 | S_7 | S_8 | S_9 | S_10 | S_11 | S_12 | S_13;
export interface S_1 {
    kind: ASTKinds.S_1;
}
export interface S_2 {
    kind: ASTKinds.S_2;
}
export interface S_3 {
    kind: ASTKinds.S_3;
}
export interface S_4 {
    kind: ASTKinds.S_4;
}
export interface S_5 {
    kind: ASTKinds.S_5;
}
export interface S_6 {
    kind: ASTKinds.S_6;
}
export interface S_7 {
    kind: ASTKinds.S_7;
}
export interface S_8 {
    kind: ASTKinds.S_8;
}
export interface S_9 {
    kind: ASTKinds.S_9;
}
export interface S_10 {
    kind: ASTKinds.S_10;
}
export interface S_11 {
    kind: ASTKinds.S_11;
}
export interface S_12 {
    kind: ASTKinds.S_12;
}
export interface S_13 {
    kind: ASTKinds.S_13;
}
export type T = T_1 | T_2 | T_3 | T_4 | T_5 | T_6 | T_7 | T_8 | T_9 | T_10 | T_11 | T_12 | T_13 | T_14;
export interface T_1 {
    kind: ASTKinds.T_1;
}
export interface T_2 {
    kind: ASTKinds.T_2;
}
export interface T_3 {
    kind: ASTKinds.T_3;
}
export interface T_4 {
    kind: ASTKinds.T_4;
}
export interface T_5 {
    kind: ASTKinds.T_5;
}
export interface T_6 {
    kind: ASTKinds.T_6;
}
export interface T_7 {
    kind: ASTKinds.T_7;
}
export interface T_8 {
    kind: ASTKinds.T_8;
}
export interface T_9 {
    kind: ASTKinds.T_9;
}
export interface T_10 {
    kind: ASTKinds.T_10;
}
export interface T_11 {
    kind: ASTKinds.T_11;
}
export interface T_12 {
    kind: ASTKinds.T_12;
}
export interface T_13 {
    kind: ASTKinds.T_13;
}
export interface T_14 {
    kind: ASTKinds.T_14;
}
export type V = V_1 | V_2 | V_3;
export interface V_1 {
    kind: ASTKinds.V_1;
}
export interface V_2 {
    kind: ASTKinds.V_2;
}
export interface V_3 {
    kind: ASTKinds.V_3;
}
export type W = W_1 | W_2 | W_3 | W_4;
export interface W_1 {
    kind: ASTKinds.W_1;
}
export interface W_2 {
    kind: ASTKinds.W_2;
}
export interface W_3 {
    kind: ASTKinds.W_3;
}
export interface W_4 {
    kind: ASTKinds.W_4;
}
export type X = X_1 | X_2;
export interface X_1 {
    kind: ASTKinds.X_1;
}
export interface X_2 {
    kind: ASTKinds.X_2;
}
export type Z = Z_1 | Z_2;
export interface Z_1 {
    kind: ASTKinds.Z_1;
}
export interface Z_2 {
    kind: ASTKinds.Z_2;
}
export class QuasarClassesParser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchquasarClasse($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse> {
        return this.choice<quasarClasse>([
            () => this.matchquasarClasse_1($$dpth + 1, $$cr),
            () => this.matchquasarClasse_2($$dpth + 1, $$cr),
            () => this.matchquasarClasse_3($$dpth + 1, $$cr),
            () => this.matchquasarClasse_4($$dpth + 1, $$cr),
            () => this.matchquasarClasse_5($$dpth + 1, $$cr),
            () => this.matchquasarClasse_6($$dpth + 1, $$cr),
            () => this.matchquasarClasse_7($$dpth + 1, $$cr),
            () => this.matchquasarClasse_8($$dpth + 1, $$cr),
            () => this.matchquasarClasse_9($$dpth + 1, $$cr),
            () => this.matchquasarClasse_10($$dpth + 1, $$cr),
            () => this.matchquasarClasse_11($$dpth + 1, $$cr),
            () => this.matchquasarClasse_12($$dpth + 1, $$cr),
            () => this.matchquasarClasse_13($$dpth + 1, $$cr),
            () => this.matchquasarClasse_14($$dpth + 1, $$cr),
            () => this.matchquasarClasse_15($$dpth + 1, $$cr),
            () => this.matchquasarClasse_16($$dpth + 1, $$cr),
            () => this.matchquasarClasse_17($$dpth + 1, $$cr),
            () => this.matchquasarClasse_18($$dpth + 1, $$cr),
            () => this.matchquasarClasse_19($$dpth + 1, $$cr),
            () => this.matchquasarClasse_20($$dpth + 1, $$cr),
        ]);
    }
    public matchquasarClasse_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_1> {
        return this.matchA($$dpth + 1, $$cr);
    }
    public matchquasarClasse_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_2> {
        return this.matchB($$dpth + 1, $$cr);
    }
    public matchquasarClasse_3($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_3> {
        return this.matchC($$dpth + 1, $$cr);
    }
    public matchquasarClasse_4($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_4> {
        return this.matchD($$dpth + 1, $$cr);
    }
    public matchquasarClasse_5($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_5> {
        return this.matchE($$dpth + 1, $$cr);
    }
    public matchquasarClasse_6($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_6> {
        return this.matchF($$dpth + 1, $$cr);
    }
    public matchquasarClasse_7($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_7> {
        return this.matchH($$dpth + 1, $$cr);
    }
    public matchquasarClasse_8($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_8> {
        return this.matchI($$dpth + 1, $$cr);
    }
    public matchquasarClasse_9($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_9> {
        return this.matchL($$dpth + 1, $$cr);
    }
    public matchquasarClasse_10($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_10> {
        return this.matchM($$dpth + 1, $$cr);
    }
    public matchquasarClasse_11($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_11> {
        return this.matchN($$dpth + 1, $$cr);
    }
    public matchquasarClasse_12($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_12> {
        return this.matchO($$dpth + 1, $$cr);
    }
    public matchquasarClasse_13($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_13> {
        return this.matchP($$dpth + 1, $$cr);
    }
    public matchquasarClasse_14($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_14> {
        return this.matchR($$dpth + 1, $$cr);
    }
    public matchquasarClasse_15($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_15> {
        return this.matchS($$dpth + 1, $$cr);
    }
    public matchquasarClasse_16($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_16> {
        return this.matchT($$dpth + 1, $$cr);
    }
    public matchquasarClasse_17($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_17> {
        return this.matchV($$dpth + 1, $$cr);
    }
    public matchquasarClasse_18($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_18> {
        return this.matchW($$dpth + 1, $$cr);
    }
    public matchquasarClasse_19($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_19> {
        return this.matchX($$dpth + 1, $$cr);
    }
    public matchquasarClasse_20($$dpth: number, $$cr?: ErrorTracker): Nullable<quasarClasse_20> {
        return this.matchZ($$dpth + 1, $$cr);
    }
    public matchA($$dpth: number, $$cr?: ErrorTracker): Nullable<A> {
        return this.choice<A>([
            () => this.matchA_1($$dpth + 1, $$cr),
            () => this.matchA_2($$dpth + 1, $$cr),
            () => this.matchA_3($$dpth + 1, $$cr),
            () => this.matchA_4($$dpth + 1, $$cr),
            () => this.matchA_5($$dpth + 1, $$cr),
            () => this.matchA_6($$dpth + 1, $$cr),
            () => this.matchA_7($$dpth + 1, $$cr),
            () => this.matchA_8($$dpth + 1, $$cr),
            () => this.matchA_9($$dpth + 1, $$cr),
            () => this.matchA_10($$dpth + 1, $$cr),
            () => this.matchA_11($$dpth + 1, $$cr),
            () => this.matchA_12($$dpth + 1, $$cr),
        ]);
    }
    public matchA_1($$dpth: number, $$cr?: ErrorTracker): Nullable<A_1> {
        return this.run<A_1>($$dpth,
            () => {
                let $$res: Nullable<A_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_1, };
                }
                return $$res;
            });
    }
    public matchA_2($$dpth: number, $$cr?: ErrorTracker): Nullable<A_2> {
        return this.run<A_2>($$dpth,
            () => {
                let $$res: Nullable<A_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-center)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_2, };
                }
                return $$res;
            });
    }
    public matchA_3($$dpth: number, $$cr?: ErrorTracker): Nullable<A_3> {
        return this.run<A_3>($$dpth,
            () => {
                let $$res: Nullable<A_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-top)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_3, };
                }
                return $$res;
            });
    }
    public matchA_4($$dpth: number, $$cr?: ErrorTracker): Nullable<A_4> {
        return this.run<A_4>($$dpth,
            () => {
                let $$res: Nullable<A_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_4, };
                }
                return $$res;
            });
    }
    public matchA_5($$dpth: number, $$cr?: ErrorTracker): Nullable<A_5> {
        return this.run<A_5>($$dpth,
            () => {
                let $$res: Nullable<A_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-bottom)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_5, };
                }
                return $$res;
            });
    }
    public matchA_6($$dpth: number, $$cr?: ErrorTracker): Nullable<A_6> {
        return this.run<A_6>($$dpth,
            () => {
                let $$res: Nullable<A_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_6, };
                }
                return $$res;
            });
    }
    public matchA_7($$dpth: number, $$cr?: ErrorTracker): Nullable<A_7> {
        return this.run<A_7>($$dpth,
            () => {
                let $$res: Nullable<A_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-top-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_7, };
                }
                return $$res;
            });
    }
    public matchA_8($$dpth: number, $$cr?: ErrorTracker): Nullable<A_8> {
        return this.run<A_8>($$dpth,
            () => {
                let $$res: Nullable<A_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-top-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_8, };
                }
                return $$res;
            });
    }
    public matchA_9($$dpth: number, $$cr?: ErrorTracker): Nullable<A_9> {
        return this.run<A_9>($$dpth,
            () => {
                let $$res: Nullable<A_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-bottom-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_9, };
                }
                return $$res;
            });
    }
    public matchA_10($$dpth: number, $$cr?: ErrorTracker): Nullable<A_10> {
        return this.run<A_10>($$dpth,
            () => {
                let $$res: Nullable<A_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-bottom-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_10, };
                }
                return $$res;
            });
    }
    public matchA_11($$dpth: number, $$cr?: ErrorTracker): Nullable<A_11> {
        return this.run<A_11>($$dpth,
            () => {
                let $$res: Nullable<A_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:absolute-full)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_11, };
                }
                return $$res;
            });
    }
    public matchA_12($$dpth: number, $$cr?: ErrorTracker): Nullable<A_12> {
        return this.run<A_12>($$dpth,
            () => {
                let $$res: Nullable<A_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:all-pointer-events)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.A_12, };
                }
                return $$res;
            });
    }
    public matchB($$dpth: number, $$cr?: ErrorTracker): Nullable<B> {
        return this.run<B>($$dpth,
            () => {
                let $$res: Nullable<B> = null;
                if (true
                    && this.regexAccept(String.raw`(?:block)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.B, };
                }
                return $$res;
            });
    }
    public matchC($$dpth: number, $$cr?: ErrorTracker): Nullable<C> {
        return this.choice<C>([
            () => this.matchC_1($$dpth + 1, $$cr),
            () => this.matchC_2($$dpth + 1, $$cr),
            () => this.matchC_3($$dpth + 1, $$cr),
            () => this.matchC_4($$dpth + 1, $$cr),
            () => this.matchC_5($$dpth + 1, $$cr),
        ]);
    }
    public matchC_1($$dpth: number, $$cr?: ErrorTracker): Nullable<C_1> {
        return this.run<C_1>($$dpth,
            () => {
                let $$res: Nullable<C_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:cordova-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.C_1, };
                }
                return $$res;
            });
    }
    public matchC_2($$dpth: number, $$cr?: ErrorTracker): Nullable<C_2> {
        return this.run<C_2>($$dpth,
            () => {
                let $$res: Nullable<C_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:capacitor-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.C_2, };
                }
                return $$res;
            });
    }
    public matchC_3($$dpth: number, $$cr?: ErrorTracker): Nullable<C_3> {
        return this.run<C_3>($$dpth,
            () => {
                let $$res: Nullable<C_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:cordova-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.C_3, };
                }
                return $$res;
            });
    }
    public matchC_4($$dpth: number, $$cr?: ErrorTracker): Nullable<C_4> {
        return this.run<C_4>($$dpth,
            () => {
                let $$res: Nullable<C_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:capacitor-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.C_4, };
                }
                return $$res;
            });
    }
    public matchC_5($$dpth: number, $$cr?: ErrorTracker): Nullable<C_5> {
        return this.run<C_5>($$dpth,
            () => {
                let $$res: Nullable<C_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:cursor-pointer)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.C_5, };
                }
                return $$res;
            });
    }
    public matchD($$dpth: number, $$cr?: ErrorTracker): Nullable<D> {
        return this.choice<D>([
            () => this.matchD_1($$dpth + 1, $$cr),
            () => this.matchD_2($$dpth + 1, $$cr),
            () => this.matchD_3($$dpth + 1, $$cr),
        ]);
    }
    public matchD_1($$dpth: number, $$cr?: ErrorTracker): Nullable<D_1> {
        return this.run<D_1>($$dpth,
            () => {
                let $$res: Nullable<D_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:disabled)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.D_1, };
                }
                return $$res;
            });
    }
    public matchD_2($$dpth: number, $$cr?: ErrorTracker): Nullable<D_2> {
        return this.run<D_2>($$dpth,
            () => {
                let $$res: Nullable<D_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:desktop-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.D_2, };
                }
                return $$res;
            });
    }
    public matchD_3($$dpth: number, $$cr?: ErrorTracker): Nullable<D_3> {
        return this.run<D_3>($$dpth,
            () => {
                let $$res: Nullable<D_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:desktop-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.D_3, };
                }
                return $$res;
            });
    }
    public matchE($$dpth: number, $$cr?: ErrorTracker): Nullable<E> {
        return this.choice<E>([
            () => this.matchE_1($$dpth + 1, $$cr),
            () => this.matchE_2($$dpth + 1, $$cr),
            () => this.matchE_3($$dpth + 1, $$cr),
            () => this.matchE_4($$dpth + 1, $$cr),
            () => this.matchE_5($$dpth + 1, $$cr),
        ]);
    }
    public matchE_1($$dpth: number, $$cr?: ErrorTracker): Nullable<E_1> {
        return this.run<E_1>($$dpth,
            () => {
                let $$res: Nullable<E_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:ellipsis)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.E_1, };
                }
                return $$res;
            });
    }
    public matchE_2($$dpth: number, $$cr?: ErrorTracker): Nullable<E_2> {
        return this.run<E_2>($$dpth,
            () => {
                let $$res: Nullable<E_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:ellipsis-2-lines)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.E_2, };
                }
                return $$res;
            });
    }
    public matchE_3($$dpth: number, $$cr?: ErrorTracker): Nullable<E_3> {
        return this.run<E_3>($$dpth,
            () => {
                let $$res: Nullable<E_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:ellipsis-3-lines)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.E_3, };
                }
                return $$res;
            });
    }
    public matchE_4($$dpth: number, $$cr?: ErrorTracker): Nullable<E_4> {
        return this.run<E_4>($$dpth,
            () => {
                let $$res: Nullable<E_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:electron-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.E_4, };
                }
                return $$res;
            });
    }
    public matchE_5($$dpth: number, $$cr?: ErrorTracker): Nullable<E_5> {
        return this.run<E_5>($$dpth,
            () => {
                let $$res: Nullable<E_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:electron-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.E_5, };
                }
                return $$res;
            });
    }
    public matchF($$dpth: number, $$cr?: ErrorTracker): Nullable<F> {
        return this.choice<F>([
            () => this.matchF_1($$dpth + 1, $$cr),
            () => this.matchF_2($$dpth + 1, $$cr),
            () => this.matchF_3($$dpth + 1, $$cr),
            () => this.matchF_4($$dpth + 1, $$cr),
            () => this.matchF_5($$dpth + 1, $$cr),
            () => this.matchF_6($$dpth + 1, $$cr),
            () => this.matchF_7($$dpth + 1, $$cr),
            () => this.matchF_8($$dpth + 1, $$cr),
            () => this.matchF_9($$dpth + 1, $$cr),
            () => this.matchF_10($$dpth + 1, $$cr),
            () => this.matchF_11($$dpth + 1, $$cr),
            () => this.matchF_12($$dpth + 1, $$cr),
            () => this.matchF_13($$dpth + 1, $$cr),
            () => this.matchF_14($$dpth + 1, $$cr),
            () => this.matchF_15($$dpth + 1, $$cr),
            () => this.matchF_16($$dpth + 1, $$cr),
            () => this.matchF_17($$dpth + 1, $$cr),
            () => this.matchF_18($$dpth + 1, $$cr),
            () => this.matchF_19($$dpth + 1, $$cr),
        ]);
    }
    public matchF_1($$dpth: number, $$cr?: ErrorTracker): Nullable<F_1> {
        return this.run<F_1>($$dpth,
            () => {
                let $$res: Nullable<F_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fullscreen)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_1, };
                }
                return $$res;
            });
    }
    public matchF_2($$dpth: number, $$cr?: ErrorTracker): Nullable<F_2> {
        return this.run<F_2>($$dpth,
            () => {
                let $$res: Nullable<F_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_2, };
                }
                return $$res;
            });
    }
    public matchF_3($$dpth: number, $$cr?: ErrorTracker): Nullable<F_3> {
        return this.run<F_3>($$dpth,
            () => {
                let $$res: Nullable<F_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-center)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_3, };
                }
                return $$res;
            });
    }
    public matchF_4($$dpth: number, $$cr?: ErrorTracker): Nullable<F_4> {
        return this.run<F_4>($$dpth,
            () => {
                let $$res: Nullable<F_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-top)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_4, };
                }
                return $$res;
            });
    }
    public matchF_5($$dpth: number, $$cr?: ErrorTracker): Nullable<F_5> {
        return this.run<F_5>($$dpth,
            () => {
                let $$res: Nullable<F_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_5, };
                }
                return $$res;
            });
    }
    public matchF_6($$dpth: number, $$cr?: ErrorTracker): Nullable<F_6> {
        return this.run<F_6>($$dpth,
            () => {
                let $$res: Nullable<F_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-bottom)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_6, };
                }
                return $$res;
            });
    }
    public matchF_7($$dpth: number, $$cr?: ErrorTracker): Nullable<F_7> {
        return this.run<F_7>($$dpth,
            () => {
                let $$res: Nullable<F_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_7, };
                }
                return $$res;
            });
    }
    public matchF_8($$dpth: number, $$cr?: ErrorTracker): Nullable<F_8> {
        return this.run<F_8>($$dpth,
            () => {
                let $$res: Nullable<F_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-top-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_8, };
                }
                return $$res;
            });
    }
    public matchF_9($$dpth: number, $$cr?: ErrorTracker): Nullable<F_9> {
        return this.run<F_9>($$dpth,
            () => {
                let $$res: Nullable<F_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-top-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_9, };
                }
                return $$res;
            });
    }
    public matchF_10($$dpth: number, $$cr?: ErrorTracker): Nullable<F_10> {
        return this.run<F_10>($$dpth,
            () => {
                let $$res: Nullable<F_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-bottom-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_10, };
                }
                return $$res;
            });
    }
    public matchF_11($$dpth: number, $$cr?: ErrorTracker): Nullable<F_11> {
        return this.run<F_11>($$dpth,
            () => {
                let $$res: Nullable<F_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-bottom-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_11, };
                }
                return $$res;
            });
    }
    public matchF_12($$dpth: number, $$cr?: ErrorTracker): Nullable<F_12> {
        return this.run<F_12>($$dpth,
            () => {
                let $$res: Nullable<F_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fixed-full)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_12, };
                }
                return $$res;
            });
    }
    public matchF_13($$dpth: number, $$cr?: ErrorTracker): Nullable<F_13> {
        return this.run<F_13>($$dpth,
            () => {
                let $$res: Nullable<F_13> = null;
                if (true
                    && this.regexAccept(String.raw`(?:float-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_13, };
                }
                return $$res;
            });
    }
    public matchF_14($$dpth: number, $$cr?: ErrorTracker): Nullable<F_14> {
        return this.run<F_14>($$dpth,
            () => {
                let $$res: Nullable<F_14> = null;
                if (true
                    && this.regexAccept(String.raw`(?:float-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_14, };
                }
                return $$res;
            });
    }
    public matchF_15($$dpth: number, $$cr?: ErrorTracker): Nullable<F_15> {
        return this.run<F_15>($$dpth,
            () => {
                let $$res: Nullable<F_15> = null;
                if (true
                    && this.regexAccept(String.raw`(?:fit)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_15, };
                }
                return $$res;
            });
    }
    public matchF_16($$dpth: number, $$cr?: ErrorTracker): Nullable<F_16> {
        return this.run<F_16>($$dpth,
            () => {
                let $$res: Nullable<F_16> = null;
                if (true
                    && this.regexAccept(String.raw`(?:full-height)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_16, };
                }
                return $$res;
            });
    }
    public matchF_17($$dpth: number, $$cr?: ErrorTracker): Nullable<F_17> {
        return this.run<F_17>($$dpth,
            () => {
                let $$res: Nullable<F_17> = null;
                if (true
                    && this.regexAccept(String.raw`(?:full-width)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_17, };
                }
                return $$res;
            });
    }
    public matchF_18($$dpth: number, $$cr?: ErrorTracker): Nullable<F_18> {
        return this.run<F_18>($$dpth,
            () => {
                let $$res: Nullable<F_18> = null;
                if (true
                    && this.regexAccept(String.raw`(?:flip-horizontal)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_18, };
                }
                return $$res;
            });
    }
    public matchF_19($$dpth: number, $$cr?: ErrorTracker): Nullable<F_19> {
        return this.run<F_19>($$dpth,
            () => {
                let $$res: Nullable<F_19> = null;
                if (true
                    && this.regexAccept(String.raw`(?:flip-vertical)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.F_19, };
                }
                return $$res;
            });
    }
    public matchH($$dpth: number, $$cr?: ErrorTracker): Nullable<H> {
        return this.choice<H>([
            () => this.matchH_1($$dpth + 1, $$cr),
            () => this.matchH_2($$dpth + 1, $$cr),
            () => this.matchH_3($$dpth + 1, $$cr),
            () => this.matchH_4($$dpth + 1, $$cr),
            () => this.matchH_5($$dpth + 1, $$cr),
            () => this.matchH_6($$dpth + 1, $$cr),
            () => this.matchH_7($$dpth + 1, $$cr),
            () => this.matchH_8($$dpth + 1, $$cr),
            () => this.matchH_9($$dpth + 1, $$cr),
            () => this.matchH_10($$dpth + 1, $$cr),
            () => this.matchH_11($$dpth + 1, $$cr),
            () => this.matchH_12($$dpth + 1, $$cr),
            () => this.matchH_13($$dpth + 1, $$cr),
        ]);
    }
    public matchH_1($$dpth: number, $$cr?: ErrorTracker): Nullable<H_1> {
        return this.run<H_1>($$dpth,
            () => {
                let $$res: Nullable<H_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_1, };
                }
                return $$res;
            });
    }
    public matchH_2($$dpth: number, $$cr?: ErrorTracker): Nullable<H_2> {
        return this.run<H_2>($$dpth,
            () => {
                let $$res: Nullable<H_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-1)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_2, };
                }
                return $$res;
            });
    }
    public matchH_3($$dpth: number, $$cr?: ErrorTracker): Nullable<H_3> {
        return this.run<H_3>($$dpth,
            () => {
                let $$res: Nullable<H_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-2)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_3, };
                }
                return $$res;
            });
    }
    public matchH_4($$dpth: number, $$cr?: ErrorTracker): Nullable<H_4> {
        return this.run<H_4>($$dpth,
            () => {
                let $$res: Nullable<H_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-3)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_4, };
                }
                return $$res;
            });
    }
    public matchH_5($$dpth: number, $$cr?: ErrorTracker): Nullable<H_5> {
        return this.run<H_5>($$dpth,
            () => {
                let $$res: Nullable<H_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-4)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_5, };
                }
                return $$res;
            });
    }
    public matchH_6($$dpth: number, $$cr?: ErrorTracker): Nullable<H_6> {
        return this.run<H_6>($$dpth,
            () => {
                let $$res: Nullable<H_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-5)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_6, };
                }
                return $$res;
            });
    }
    public matchH_7($$dpth: number, $$cr?: ErrorTracker): Nullable<H_7> {
        return this.run<H_7>($$dpth,
            () => {
                let $$res: Nullable<H_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_7, };
                }
                return $$res;
            });
    }
    public matchH_8($$dpth: number, $$cr?: ErrorTracker): Nullable<H_8> {
        return this.run<H_8>($$dpth,
            () => {
                let $$res: Nullable<H_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up-1)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_8, };
                }
                return $$res;
            });
    }
    public matchH_9($$dpth: number, $$cr?: ErrorTracker): Nullable<H_9> {
        return this.run<H_9>($$dpth,
            () => {
                let $$res: Nullable<H_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up-2)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_9, };
                }
                return $$res;
            });
    }
    public matchH_10($$dpth: number, $$cr?: ErrorTracker): Nullable<H_10> {
        return this.run<H_10>($$dpth,
            () => {
                let $$res: Nullable<H_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up-3)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_10, };
                }
                return $$res;
            });
    }
    public matchH_11($$dpth: number, $$cr?: ErrorTracker): Nullable<H_11> {
        return this.run<H_11>($$dpth,
            () => {
                let $$res: Nullable<H_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up-4)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_11, };
                }
                return $$res;
            });
    }
    public matchH_12($$dpth: number, $$cr?: ErrorTracker): Nullable<H_12> {
        return this.run<H_12>($$dpth,
            () => {
                let $$res: Nullable<H_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hoverable-up-5)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_12, };
                }
                return $$res;
            });
    }
    public matchH_13($$dpth: number, $$cr?: ErrorTracker): Nullable<H_13> {
        return this.run<H_13>($$dpth,
            () => {
                let $$res: Nullable<H_13> = null;
                if (true
                    && this.regexAccept(String.raw`(?:hidden)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.H_13, };
                }
                return $$res;
            });
    }
    public matchI($$dpth: number, $$cr?: ErrorTracker): Nullable<I> {
        return this.choice<I>([
            () => this.matchI_1($$dpth + 1, $$cr),
            () => this.matchI_2($$dpth + 1, $$cr),
        ]);
    }
    public matchI_1($$dpth: number, $$cr?: ErrorTracker): Nullable<I_1> {
        return this.run<I_1>($$dpth,
            () => {
                let $$res: Nullable<I_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:inset-shadow)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.I_1, };
                }
                return $$res;
            });
    }
    public matchI_2($$dpth: number, $$cr?: ErrorTracker): Nullable<I_2> {
        return this.run<I_2>($$dpth,
            () => {
                let $$res: Nullable<I_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:invisible)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.I_2, };
                }
                return $$res;
            });
    }
    public matchL($$dpth: number, $$cr?: ErrorTracker): Nullable<L> {
        return this.choice<L>([
            () => this.matchL_1($$dpth + 1, $$cr),
            () => this.matchL_2($$dpth + 1, $$cr),
        ]);
    }
    public matchL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<L_1> {
        return this.run<L_1>($$dpth,
            () => {
                let $$res: Nullable<L_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:light-dimmed)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.L_1, };
                }
                return $$res;
            });
    }
    public matchL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<L_2> {
        return this.run<L_2>($$dpth,
            () => {
                let $$res: Nullable<L_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:lg)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.L_2, };
                }
                return $$res;
            });
    }
    public matchM($$dpth: number, $$cr?: ErrorTracker): Nullable<M> {
        return this.choice<M>([
            () => this.matchM_1($$dpth + 1, $$cr),
            () => this.matchM_2($$dpth + 1, $$cr),
            () => this.matchM_3($$dpth + 1, $$cr),
        ]);
    }
    public matchM_1($$dpth: number, $$cr?: ErrorTracker): Nullable<M_1> {
        return this.run<M_1>($$dpth,
            () => {
                let $$res: Nullable<M_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:md)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.M_1, };
                }
                return $$res;
            });
    }
    public matchM_2($$dpth: number, $$cr?: ErrorTracker): Nullable<M_2> {
        return this.run<M_2>($$dpth,
            () => {
                let $$res: Nullable<M_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:mobile-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.M_2, };
                }
                return $$res;
            });
    }
    public matchM_3($$dpth: number, $$cr?: ErrorTracker): Nullable<M_3> {
        return this.run<M_3>($$dpth,
            () => {
                let $$res: Nullable<M_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:mobile-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.M_3, };
                }
                return $$res;
            });
    }
    public matchN($$dpth: number, $$cr?: ErrorTracker): Nullable<N> {
        return this.choice<N>([
            () => this.matchN_1($$dpth + 1, $$cr),
            () => this.matchN_2($$dpth + 1, $$cr),
            () => this.matchN_3($$dpth + 1, $$cr),
            () => this.matchN_4($$dpth + 1, $$cr),
            () => this.matchN_5($$dpth + 1, $$cr),
            () => this.matchN_6($$dpth + 1, $$cr),
            () => this.matchN_7($$dpth + 1, $$cr),
            () => this.matchN_8($$dpth + 1, $$cr),
            () => this.matchN_9($$dpth + 1, $$cr),
        ]);
    }
    public matchN_1($$dpth: number, $$cr?: ErrorTracker): Nullable<N_1> {
        return this.run<N_1>($$dpth,
            () => {
                let $$res: Nullable<N_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-shadow)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_1, };
                }
                return $$res;
            });
    }
    public matchN_2($$dpth: number, $$cr?: ErrorTracker): Nullable<N_2> {
        return this.run<N_2>($$dpth,
            () => {
                let $$res: Nullable<N_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:native-mobile-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_2, };
                }
                return $$res;
            });
    }
    public matchN_3($$dpth: number, $$cr?: ErrorTracker): Nullable<N_3> {
        return this.run<N_3>($$dpth,
            () => {
                let $$res: Nullable<N_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:native-mobile-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_3, };
                }
                return $$res;
            });
    }
    public matchN_4($$dpth: number, $$cr?: ErrorTracker): Nullable<N_4> {
        return this.run<N_4>($$dpth,
            () => {
                let $$res: Nullable<N_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:non-selectable)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_4, };
                }
                return $$res;
            });
    }
    public matchN_5($$dpth: number, $$cr?: ErrorTracker): Nullable<N_5> {
        return this.run<N_5>($$dpth,
            () => {
                let $$res: Nullable<N_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-scroll)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_5, };
                }
                return $$res;
            });
    }
    public matchN_6($$dpth: number, $$cr?: ErrorTracker): Nullable<N_6> {
        return this.run<N_6>($$dpth,
            () => {
                let $$res: Nullable<N_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-pointer-events)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_6, };
                }
                return $$res;
            });
    }
    public matchN_7($$dpth: number, $$cr?: ErrorTracker): Nullable<N_7> {
        return this.run<N_7>($$dpth,
            () => {
                let $$res: Nullable<N_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-border)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_7, };
                }
                return $$res;
            });
    }
    public matchN_8($$dpth: number, $$cr?: ErrorTracker): Nullable<N_8> {
        return this.run<N_8>($$dpth,
            () => {
                let $$res: Nullable<N_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-margin)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_8, };
                }
                return $$res;
            });
    }
    public matchN_9($$dpth: number, $$cr?: ErrorTracker): Nullable<N_9> {
        return this.run<N_9>($$dpth,
            () => {
                let $$res: Nullable<N_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:no-padding)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.N_9, };
                }
                return $$res;
            });
    }
    public matchO($$dpth: number, $$cr?: ErrorTracker): Nullable<O> {
        return this.choice<O>([
            () => this.matchO_1($$dpth + 1, $$cr),
            () => this.matchO_2($$dpth + 1, $$cr),
            () => this.matchO_3($$dpth + 1, $$cr),
            () => this.matchO_4($$dpth + 1, $$cr),
        ]);
    }
    public matchO_1($$dpth: number, $$cr?: ErrorTracker): Nullable<O_1> {
        return this.run<O_1>($$dpth,
            () => {
                let $$res: Nullable<O_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:on-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.O_1, };
                }
                return $$res;
            });
    }
    public matchO_2($$dpth: number, $$cr?: ErrorTracker): Nullable<O_2> {
        return this.run<O_2>($$dpth,
            () => {
                let $$res: Nullable<O_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:on-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.O_2, };
                }
                return $$res;
            });
    }
    public matchO_3($$dpth: number, $$cr?: ErrorTracker): Nullable<O_3> {
        return this.run<O_3>($$dpth,
            () => {
                let $$res: Nullable<O_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:orientation-portrait)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.O_3, };
                }
                return $$res;
            });
    }
    public matchO_4($$dpth: number, $$cr?: ErrorTracker): Nullable<O_4> {
        return this.run<O_4>($$dpth,
            () => {
                let $$res: Nullable<O_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:orientation-landscape)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.O_4, };
                }
                return $$res;
            });
    }
    public matchP($$dpth: number, $$cr?: ErrorTracker): Nullable<P> {
        return this.choice<P>([
            () => this.matchP_1($$dpth + 1, $$cr),
            () => this.matchP_2($$dpth + 1, $$cr),
            () => this.matchP_3($$dpth + 1, $$cr),
            () => this.matchP_4($$dpth + 1, $$cr),
            () => this.matchP_5($$dpth + 1, $$cr),
            () => this.matchP_6($$dpth + 1, $$cr),
            () => this.matchP_7($$dpth + 1, $$cr),
        ]);
    }
    public matchP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<P_1> {
        return this.run<P_1>($$dpth,
            () => {
                let $$res: Nullable<P_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:properties)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_1, };
                }
                return $$res;
            });
    }
    public matchP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<P_2> {
        return this.run<P_2>($$dpth,
            () => {
                let $$res: Nullable<P_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:platform-ios-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_2, };
                }
                return $$res;
            });
    }
    public matchP_3($$dpth: number, $$cr?: ErrorTracker): Nullable<P_3> {
        return this.run<P_3>($$dpth,
            () => {
                let $$res: Nullable<P_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:platform-android-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_3, };
                }
                return $$res;
            });
    }
    public matchP_4($$dpth: number, $$cr?: ErrorTracker): Nullable<P_4> {
        return this.run<P_4>($$dpth,
            () => {
                let $$res: Nullable<P_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:platform-ios-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_4, };
                }
                return $$res;
            });
    }
    public matchP_5($$dpth: number, $$cr?: ErrorTracker): Nullable<P_5> {
        return this.run<P_5>($$dpth,
            () => {
                let $$res: Nullable<P_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:platform-android-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_5, };
                }
                return $$res;
            });
    }
    public matchP_6($$dpth: number, $$cr?: ErrorTracker): Nullable<P_6> {
        return this.run<P_6>($$dpth,
            () => {
                let $$res: Nullable<P_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:print-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_6, };
                }
                return $$res;
            });
    }
    public matchP_7($$dpth: number, $$cr?: ErrorTracker): Nullable<P_7> {
        return this.run<P_7>($$dpth,
            () => {
                let $$res: Nullable<P_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:print-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.P_7, };
                }
                return $$res;
            });
    }
    public matchR($$dpth: number, $$cr?: ErrorTracker): Nullable<R> {
        return this.choice<R>([
            () => this.matchR_1($$dpth + 1, $$cr),
            () => this.matchR_2($$dpth + 1, $$cr),
            () => this.matchR_3($$dpth + 1, $$cr),
            () => this.matchR_4($$dpth + 1, $$cr),
        ]);
    }
    public matchR_1($$dpth: number, $$cr?: ErrorTracker): Nullable<R_1> {
        return this.run<R_1>($$dpth,
            () => {
                let $$res: Nullable<R_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:rotate-90)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.R_1, };
                }
                return $$res;
            });
    }
    public matchR_2($$dpth: number, $$cr?: ErrorTracker): Nullable<R_2> {
        return this.run<R_2>($$dpth,
            () => {
                let $$res: Nullable<R_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:rotate-180)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.R_2, };
                }
                return $$res;
            });
    }
    public matchR_3($$dpth: number, $$cr?: ErrorTracker): Nullable<R_3> {
        return this.run<R_3>($$dpth,
            () => {
                let $$res: Nullable<R_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:rotate-270)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.R_3, };
                }
                return $$res;
            });
    }
    public matchR_4($$dpth: number, $$cr?: ErrorTracker): Nullable<R_4> {
        return this.run<R_4>($$dpth,
            () => {
                let $$res: Nullable<R_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:round-borders)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.R_4, };
                }
                return $$res;
            });
    }
    public matchS($$dpth: number, $$cr?: ErrorTracker): Nullable<S> {
        return this.choice<S>([
            () => this.matchS_1($$dpth + 1, $$cr),
            () => this.matchS_2($$dpth + 1, $$cr),
            () => this.matchS_3($$dpth + 1, $$cr),
            () => this.matchS_4($$dpth + 1, $$cr),
            () => this.matchS_5($$dpth + 1, $$cr),
            () => this.matchS_6($$dpth + 1, $$cr),
            () => this.matchS_7($$dpth + 1, $$cr),
            () => this.matchS_8($$dpth + 1, $$cr),
            () => this.matchS_9($$dpth + 1, $$cr),
            () => this.matchS_10($$dpth + 1, $$cr),
            () => this.matchS_11($$dpth + 1, $$cr),
            () => this.matchS_12($$dpth + 1, $$cr),
            () => this.matchS_13($$dpth + 1, $$cr),
        ]);
    }
    public matchS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<S_1> {
        return this.run<S_1>($$dpth,
            () => {
                let $$res: Nullable<S_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-1)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_1, };
                }
                return $$res;
            });
    }
    public matchS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<S_2> {
        return this.run<S_2>($$dpth,
            () => {
                let $$res: Nullable<S_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-2)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_2, };
                }
                return $$res;
            });
    }
    public matchS_3($$dpth: number, $$cr?: ErrorTracker): Nullable<S_3> {
        return this.run<S_3>($$dpth,
            () => {
                let $$res: Nullable<S_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-3)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_3, };
                }
                return $$res;
            });
    }
    public matchS_4($$dpth: number, $$cr?: ErrorTracker): Nullable<S_4> {
        return this.run<S_4>($$dpth,
            () => {
                let $$res: Nullable<S_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-4)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_4, };
                }
                return $$res;
            });
    }
    public matchS_5($$dpth: number, $$cr?: ErrorTracker): Nullable<S_5> {
        return this.run<S_5>($$dpth,
            () => {
                let $$res: Nullable<S_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-5)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_5, };
                }
                return $$res;
            });
    }
    public matchS_6($$dpth: number, $$cr?: ErrorTracker): Nullable<S_6> {
        return this.run<S_6>($$dpth,
            () => {
                let $$res: Nullable<S_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-transition)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_6, };
                }
                return $$res;
            });
    }
    public matchS_7($$dpth: number, $$cr?: ErrorTracker): Nullable<S_7> {
        return this.run<S_7>($$dpth,
            () => {
                let $$res: Nullable<S_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-up-1)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_7, };
                }
                return $$res;
            });
    }
    public matchS_8($$dpth: number, $$cr?: ErrorTracker): Nullable<S_8> {
        return this.run<S_8>($$dpth,
            () => {
                let $$res: Nullable<S_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-up-2)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_8, };
                }
                return $$res;
            });
    }
    public matchS_9($$dpth: number, $$cr?: ErrorTracker): Nullable<S_9> {
        return this.run<S_9>($$dpth,
            () => {
                let $$res: Nullable<S_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-up-3)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_9, };
                }
                return $$res;
            });
    }
    public matchS_10($$dpth: number, $$cr?: ErrorTracker): Nullable<S_10> {
        return this.run<S_10>($$dpth,
            () => {
                let $$res: Nullable<S_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-up-4)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_10, };
                }
                return $$res;
            });
    }
    public matchS_11($$dpth: number, $$cr?: ErrorTracker): Nullable<S_11> {
        return this.run<S_11>($$dpth,
            () => {
                let $$res: Nullable<S_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:shadow-up-5)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_11, };
                }
                return $$res;
            });
    }
    public matchS_12($$dpth: number, $$cr?: ErrorTracker): Nullable<S_12> {
        return this.run<S_12>($$dpth,
            () => {
                let $$res: Nullable<S_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:sm)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_12, };
                }
                return $$res;
            });
    }
    public matchS_13($$dpth: number, $$cr?: ErrorTracker): Nullable<S_13> {
        return this.run<S_13>($$dpth,
            () => {
                let $$res: Nullable<S_13> = null;
                if (true
                    && this.regexAccept(String.raw`(?:scrollplatforms)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.S_13, };
                }
                return $$res;
            });
    }
    public matchT($$dpth: number, $$cr?: ErrorTracker): Nullable<T> {
        return this.choice<T>([
            () => this.matchT_1($$dpth + 1, $$cr),
            () => this.matchT_2($$dpth + 1, $$cr),
            () => this.matchT_3($$dpth + 1, $$cr),
            () => this.matchT_4($$dpth + 1, $$cr),
            () => this.matchT_5($$dpth + 1, $$cr),
            () => this.matchT_6($$dpth + 1, $$cr),
            () => this.matchT_7($$dpth + 1, $$cr),
            () => this.matchT_8($$dpth + 1, $$cr),
            () => this.matchT_9($$dpth + 1, $$cr),
            () => this.matchT_10($$dpth + 1, $$cr),
            () => this.matchT_11($$dpth + 1, $$cr),
            () => this.matchT_12($$dpth + 1, $$cr),
            () => this.matchT_13($$dpth + 1, $$cr),
            () => this.matchT_14($$dpth + 1, $$cr),
        ]);
    }
    public matchT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<T_1> {
        return this.run<T_1>($$dpth,
            () => {
                let $$res: Nullable<T_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:transparent)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_1, };
                }
                return $$res;
            });
    }
    public matchT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<T_2> {
        return this.run<T_2>($$dpth,
            () => {
                let $$res: Nullable<T_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:touch-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_2, };
                }
                return $$res;
            });
    }
    public matchT_3($$dpth: number, $$cr?: ErrorTracker): Nullable<T_3> {
        return this.run<T_3>($$dpth,
            () => {
                let $$res: Nullable<T_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:touch-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_3, };
                }
                return $$res;
            });
    }
    public matchT_4($$dpth: number, $$cr?: ErrorTracker): Nullable<T_4> {
        return this.run<T_4>($$dpth,
            () => {
                let $$res: Nullable<T_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-right)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_4, };
                }
                return $$res;
            });
    }
    public matchT_5($$dpth: number, $$cr?: ErrorTracker): Nullable<T_5> {
        return this.run<T_5>($$dpth,
            () => {
                let $$res: Nullable<T_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-left)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_5, };
                }
                return $$res;
            });
    }
    public matchT_6($$dpth: number, $$cr?: ErrorTracker): Nullable<T_6> {
        return this.run<T_6>($$dpth,
            () => {
                let $$res: Nullable<T_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-center)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_6, };
                }
                return $$res;
            });
    }
    public matchT_7($$dpth: number, $$cr?: ErrorTracker): Nullable<T_7> {
        return this.run<T_7>($$dpth,
            () => {
                let $$res: Nullable<T_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-justify)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_7, };
                }
                return $$res;
            });
    }
    public matchT_8($$dpth: number, $$cr?: ErrorTracker): Nullable<T_8> {
        return this.run<T_8>($$dpth,
            () => {
                let $$res: Nullable<T_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-bold)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_8, };
                }
                return $$res;
            });
    }
    public matchT_9($$dpth: number, $$cr?: ErrorTracker): Nullable<T_9> {
        return this.run<T_9>($$dpth,
            () => {
                let $$res: Nullable<T_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-italic)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_9, };
                }
                return $$res;
            });
    }
    public matchT_10($$dpth: number, $$cr?: ErrorTracker): Nullable<T_10> {
        return this.run<T_10>($$dpth,
            () => {
                let $$res: Nullable<T_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-no-wrap)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_10, };
                }
                return $$res;
            });
    }
    public matchT_11($$dpth: number, $$cr?: ErrorTracker): Nullable<T_11> {
        return this.run<T_11>($$dpth,
            () => {
                let $$res: Nullable<T_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-strike)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_11, };
                }
                return $$res;
            });
    }
    public matchT_12($$dpth: number, $$cr?: ErrorTracker): Nullable<T_12> {
        return this.run<T_12>($$dpth,
            () => {
                let $$res: Nullable<T_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-uppercase)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_12, };
                }
                return $$res;
            });
    }
    public matchT_13($$dpth: number, $$cr?: ErrorTracker): Nullable<T_13> {
        return this.run<T_13>($$dpth,
            () => {
                let $$res: Nullable<T_13> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-lowercase)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_13, };
                }
                return $$res;
            });
    }
    public matchT_14($$dpth: number, $$cr?: ErrorTracker): Nullable<T_14> {
        return this.run<T_14>($$dpth,
            () => {
                let $$res: Nullable<T_14> = null;
                if (true
                    && this.regexAccept(String.raw`(?:text-capitalize)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.T_14, };
                }
                return $$res;
            });
    }
    public matchV($$dpth: number, $$cr?: ErrorTracker): Nullable<V> {
        return this.choice<V>([
            () => this.matchV_1($$dpth + 1, $$cr),
            () => this.matchV_2($$dpth + 1, $$cr),
            () => this.matchV_3($$dpth + 1, $$cr),
        ]);
    }
    public matchV_1($$dpth: number, $$cr?: ErrorTracker): Nullable<V_1> {
        return this.run<V_1>($$dpth,
            () => {
                let $$res: Nullable<V_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:vertical-top)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.V_1, };
                }
                return $$res;
            });
    }
    public matchV_2($$dpth: number, $$cr?: ErrorTracker): Nullable<V_2> {
        return this.run<V_2>($$dpth,
            () => {
                let $$res: Nullable<V_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:vertical-middle)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.V_2, };
                }
                return $$res;
            });
    }
    public matchV_3($$dpth: number, $$cr?: ErrorTracker): Nullable<V_3> {
        return this.run<V_3>($$dpth,
            () => {
                let $$res: Nullable<V_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:vertical-bottom)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.V_3, };
                }
                return $$res;
            });
    }
    public matchW($$dpth: number, $$cr?: ErrorTracker): Nullable<W> {
        return this.choice<W>([
            () => this.matchW_1($$dpth + 1, $$cr),
            () => this.matchW_2($$dpth + 1, $$cr),
            () => this.matchW_3($$dpth + 1, $$cr),
            () => this.matchW_4($$dpth + 1, $$cr),
        ]);
    }
    public matchW_1($$dpth: number, $$cr?: ErrorTracker): Nullable<W_1> {
        return this.run<W_1>($$dpth,
            () => {
                let $$res: Nullable<W_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:within-iframe-only)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.W_1, };
                }
                return $$res;
            });
    }
    public matchW_2($$dpth: number, $$cr?: ErrorTracker): Nullable<W_2> {
        return this.run<W_2>($$dpth,
            () => {
                let $$res: Nullable<W_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:within-iframe-hide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.W_2, };
                }
                return $$res;
            });
    }
    public matchW_3($$dpth: number, $$cr?: ErrorTracker): Nullable<W_3> {
        return this.run<W_3>($$dpth,
            () => {
                let $$res: Nullable<W_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:window-height)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.W_3, };
                }
                return $$res;
            });
    }
    public matchW_4($$dpth: number, $$cr?: ErrorTracker): Nullable<W_4> {
        return this.run<W_4>($$dpth,
            () => {
                let $$res: Nullable<W_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:window-width)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.W_4, };
                }
                return $$res;
            });
    }
    public matchX($$dpth: number, $$cr?: ErrorTracker): Nullable<X> {
        return this.choice<X>([
            () => this.matchX_1($$dpth + 1, $$cr),
            () => this.matchX_2($$dpth + 1, $$cr),
        ]);
    }
    public matchX_1($$dpth: number, $$cr?: ErrorTracker): Nullable<X_1> {
        return this.run<X_1>($$dpth,
            () => {
                let $$res: Nullable<X_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:xs)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.X_1, };
                }
                return $$res;
            });
    }
    public matchX_2($$dpth: number, $$cr?: ErrorTracker): Nullable<X_2> {
        return this.run<X_2>($$dpth,
            () => {
                let $$res: Nullable<X_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:xl)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.X_2, };
                }
                return $$res;
            });
    }
    public matchZ($$dpth: number, $$cr?: ErrorTracker): Nullable<Z> {
        return this.choice<Z>([
            () => this.matchZ_1($$dpth + 1, $$cr),
            () => this.matchZ_2($$dpth + 1, $$cr),
        ]);
    }
    public matchZ_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Z_1> {
        return this.run<Z_1>($$dpth,
            () => {
                let $$res: Nullable<Z_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:z-top)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Z_1, };
                }
                return $$res;
            });
    }
    public matchZ_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Z_2> {
        return this.run<Z_2>($$dpth,
            () => {
                let $$res: Nullable<Z_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:z-max)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Z_2, };
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchquasarClasse(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResultClassesQuasar {
        const mrk = this.mark();
        const res = this.matchquasarClasse(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchquasarClasse(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResultClassesQuasar {
    const p = new QuasarClassesParser(s);
    return p.parse();
}
export interface ParseResultClassesQuasar {
    ast: Nullable<quasarClasse>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}