/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* element := vueDecorator | meteorFunction | vueRouter | cypress
* vueDecorator := 'Mixins' | propDecorator | modelDecorator | watchDecorator | provideDecorator | injectDecorator | emitDecorator | refDecorator | componentDecorator
* propDecorator := '@Prop'$ | '@PropSync'$
* modelDecorator := '@Model'$ | '@ModelSync'$ | '@VModel'
* watchDecorator := '@Watch'
* provideDecorator := '@Provide'$ | '@ProvideReactive'$
* injectDecorator := '@Inject'$ | '@InjectReactive'$
* emitDecorator := '@Emit'
* refDecorator := '@Ref'
* componentDecorator := '@Component'
* meteorFunction := 'Meteor[.]' meteorMethods
* meteorMethods := 'startup' | 'methods' | 'publish'
* vueRouter := 'new VueRouter'$
* cypress := 'Cypress[.]' cypressMethods
* cypressMethods := cypressCommands$ | cypressCookies$ | cypressScreenshot$ | cypressSelectorPlayground$ | cypressServer$ | cypressAttribs$ | cypressDom$ | cypressOtherMethods$
* cypressCommands := 'Commands' '[.]'commandsMethods
* commandsMethods := 'add'$ | 'overwrite'$
* cypressCookies := 'Cookies' '[.]'cookiesMethods
* cookiesMethods := 'debug'$ | 'preserveOnce'$ | 'defaults'$
* cypressScreenshot := 'Screenshot' '[.]''defaults'?
* cypressSelectorPlayground := 'SelectorPlayground[.]'  selectorPlaygroundMethods
* selectorPlaygroundMethods := 'defaults'$ | 'getSelector'$
* cypressServer := 'Server.defaults'$
* cypressAttribs := 'arch'$ | 'browser'$
* cypressDom := 'dom[.]' domMethods
* domMethods := 'isHidden'$ | 'isAttached'$ | 'isDescendent'$ | 'isDetached'$ | 'isDocument'$ | 'isDom'$ | 'isElement'$ | 'isFocusable'$ | 'isFocused'$ | 'isJquery'$ | 'isScrollable'$ | 'isVisible'$ | 'isWindow'$ | 'unwrap'$ | 'wrap'$
* cypressOtherMethods := 'isBrowser'$ | 'isCy'$ | 'log'$ | 'platform'$ | 'spec'$ | 'testingType'$ | 'version'$ | 'config'$ | 'env'$
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    element_1 = "element_1",
    element_2 = "element_2",
    element_3 = "element_3",
    element_4 = "element_4",
    vueDecorator_1 = "vueDecorator_1",
    vueDecorator_2 = "vueDecorator_2",
    vueDecorator_3 = "vueDecorator_3",
    vueDecorator_4 = "vueDecorator_4",
    vueDecorator_5 = "vueDecorator_5",
    vueDecorator_6 = "vueDecorator_6",
    vueDecorator_7 = "vueDecorator_7",
    vueDecorator_8 = "vueDecorator_8",
    vueDecorator_9 = "vueDecorator_9",
    propDecorator_1 = "propDecorator_1",
    propDecorator_2 = "propDecorator_2",
    modelDecorator_1 = "modelDecorator_1",
    modelDecorator_2 = "modelDecorator_2",
    modelDecorator_3 = "modelDecorator_3",
    watchDecorator = "watchDecorator",
    provideDecorator_1 = "provideDecorator_1",
    provideDecorator_2 = "provideDecorator_2",
    injectDecorator_1 = "injectDecorator_1",
    injectDecorator_2 = "injectDecorator_2",
    emitDecorator = "emitDecorator",
    refDecorator = "refDecorator",
    componentDecorator = "componentDecorator",
    meteorFunction = "meteorFunction",
    meteorMethods_1 = "meteorMethods_1",
    meteorMethods_2 = "meteorMethods_2",
    meteorMethods_3 = "meteorMethods_3",
    vueRouter = "vueRouter",
    cypress = "cypress",
    cypressMethods_1 = "cypressMethods_1",
    cypressMethods_2 = "cypressMethods_2",
    cypressMethods_3 = "cypressMethods_3",
    cypressMethods_4 = "cypressMethods_4",
    cypressMethods_5 = "cypressMethods_5",
    cypressMethods_6 = "cypressMethods_6",
    cypressMethods_7 = "cypressMethods_7",
    cypressMethods_8 = "cypressMethods_8",
    cypressCommands = "cypressCommands",
    commandsMethods_1 = "commandsMethods_1",
    commandsMethods_2 = "commandsMethods_2",
    cypressCookies = "cypressCookies",
    cookiesMethods_1 = "cookiesMethods_1",
    cookiesMethods_2 = "cookiesMethods_2",
    cookiesMethods_3 = "cookiesMethods_3",
    cypressScreenshot = "cypressScreenshot",
    cypressSelectorPlayground = "cypressSelectorPlayground",
    selectorPlaygroundMethods_1 = "selectorPlaygroundMethods_1",
    selectorPlaygroundMethods_2 = "selectorPlaygroundMethods_2",
    cypressServer = "cypressServer",
    cypressAttribs_1 = "cypressAttribs_1",
    cypressAttribs_2 = "cypressAttribs_2",
    cypressDom = "cypressDom",
    domMethods_1 = "domMethods_1",
    domMethods_2 = "domMethods_2",
    domMethods_3 = "domMethods_3",
    domMethods_4 = "domMethods_4",
    domMethods_5 = "domMethods_5",
    domMethods_6 = "domMethods_6",
    domMethods_7 = "domMethods_7",
    domMethods_8 = "domMethods_8",
    domMethods_9 = "domMethods_9",
    domMethods_10 = "domMethods_10",
    domMethods_11 = "domMethods_11",
    domMethods_12 = "domMethods_12",
    domMethods_13 = "domMethods_13",
    domMethods_14 = "domMethods_14",
    domMethods_15 = "domMethods_15",
    cypressOtherMethods_1 = "cypressOtherMethods_1",
    cypressOtherMethods_2 = "cypressOtherMethods_2",
    cypressOtherMethods_3 = "cypressOtherMethods_3",
    cypressOtherMethods_4 = "cypressOtherMethods_4",
    cypressOtherMethods_5 = "cypressOtherMethods_5",
    cypressOtherMethods_6 = "cypressOtherMethods_6",
    cypressOtherMethods_7 = "cypressOtherMethods_7",
    cypressOtherMethods_8 = "cypressOtherMethods_8",
    cypressOtherMethods_9 = "cypressOtherMethods_9",
    $EOF = "$EOF",
}
export type element = element_1 | element_2 | element_3 | element_4;
export type element_1 = vueDecorator;
export type element_2 = meteorFunction;
export type element_3 = vueRouter;
export type element_4 = cypress;
export type vueDecorator = vueDecorator_1 | vueDecorator_2 | vueDecorator_3 | vueDecorator_4 | vueDecorator_5 | vueDecorator_6 | vueDecorator_7 | vueDecorator_8 | vueDecorator_9;
export type vueDecorator_1 = string;
export type vueDecorator_2 = propDecorator;
export type vueDecorator_3 = modelDecorator;
export type vueDecorator_4 = watchDecorator;
export type vueDecorator_5 = provideDecorator;
export type vueDecorator_6 = injectDecorator;
export type vueDecorator_7 = emitDecorator;
export type vueDecorator_8 = refDecorator;
export type vueDecorator_9 = componentDecorator;
export type propDecorator = propDecorator_1 | propDecorator_2;
export interface propDecorator_1 {
    kind: ASTKinds.propDecorator_1;
}
export interface propDecorator_2 {
    kind: ASTKinds.propDecorator_2;
}
export type modelDecorator = modelDecorator_1 | modelDecorator_2 | modelDecorator_3;
export interface modelDecorator_1 {
    kind: ASTKinds.modelDecorator_1;
}
export interface modelDecorator_2 {
    kind: ASTKinds.modelDecorator_2;
}
export type modelDecorator_3 = string;
export type watchDecorator = string;
export type provideDecorator = provideDecorator_1 | provideDecorator_2;
export interface provideDecorator_1 {
    kind: ASTKinds.provideDecorator_1;
}
export interface provideDecorator_2 {
    kind: ASTKinds.provideDecorator_2;
}
export type injectDecorator = injectDecorator_1 | injectDecorator_2;
export interface injectDecorator_1 {
    kind: ASTKinds.injectDecorator_1;
}
export interface injectDecorator_2 {
    kind: ASTKinds.injectDecorator_2;
}
export type emitDecorator = string;
export type refDecorator = string;
export type componentDecorator = string;
export interface meteorFunction {
    kind: ASTKinds.meteorFunction;
}
export type meteorMethods = meteorMethods_1 | meteorMethods_2 | meteorMethods_3;
export type meteorMethods_1 = string;
export type meteorMethods_2 = string;
export type meteorMethods_3 = string;
export interface vueRouter {
    kind: ASTKinds.vueRouter;
}
export interface cypress {
    kind: ASTKinds.cypress;
}
export type cypressMethods = cypressMethods_1 | cypressMethods_2 | cypressMethods_3 | cypressMethods_4 | cypressMethods_5 | cypressMethods_6 | cypressMethods_7 | cypressMethods_8;
export interface cypressMethods_1 {
    kind: ASTKinds.cypressMethods_1;
}
export interface cypressMethods_2 {
    kind: ASTKinds.cypressMethods_2;
}
export interface cypressMethods_3 {
    kind: ASTKinds.cypressMethods_3;
}
export interface cypressMethods_4 {
    kind: ASTKinds.cypressMethods_4;
}
export interface cypressMethods_5 {
    kind: ASTKinds.cypressMethods_5;
}
export interface cypressMethods_6 {
    kind: ASTKinds.cypressMethods_6;
}
export interface cypressMethods_7 {
    kind: ASTKinds.cypressMethods_7;
}
export interface cypressMethods_8 {
    kind: ASTKinds.cypressMethods_8;
}
export interface cypressCommands {
    kind: ASTKinds.cypressCommands;
}
export type commandsMethods = commandsMethods_1 | commandsMethods_2;
export interface commandsMethods_1 {
    kind: ASTKinds.commandsMethods_1;
}
export interface commandsMethods_2 {
    kind: ASTKinds.commandsMethods_2;
}
export interface cypressCookies {
    kind: ASTKinds.cypressCookies;
}
export type cookiesMethods = cookiesMethods_1 | cookiesMethods_2 | cookiesMethods_3;
export interface cookiesMethods_1 {
    kind: ASTKinds.cookiesMethods_1;
}
export interface cookiesMethods_2 {
    kind: ASTKinds.cookiesMethods_2;
}
export interface cookiesMethods_3 {
    kind: ASTKinds.cookiesMethods_3;
}
export interface cypressScreenshot {
    kind: ASTKinds.cypressScreenshot;
}
export interface cypressSelectorPlayground {
    kind: ASTKinds.cypressSelectorPlayground;
}
export type selectorPlaygroundMethods = selectorPlaygroundMethods_1 | selectorPlaygroundMethods_2;
export interface selectorPlaygroundMethods_1 {
    kind: ASTKinds.selectorPlaygroundMethods_1;
}
export interface selectorPlaygroundMethods_2 {
    kind: ASTKinds.selectorPlaygroundMethods_2;
}
export interface cypressServer {
    kind: ASTKinds.cypressServer;
}
export type cypressAttribs = cypressAttribs_1 | cypressAttribs_2;
export interface cypressAttribs_1 {
    kind: ASTKinds.cypressAttribs_1;
}
export interface cypressAttribs_2 {
    kind: ASTKinds.cypressAttribs_2;
}
export interface cypressDom {
    kind: ASTKinds.cypressDom;
}
export type domMethods = domMethods_1 | domMethods_2 | domMethods_3 | domMethods_4 | domMethods_5 | domMethods_6 | domMethods_7 | domMethods_8 | domMethods_9 | domMethods_10 | domMethods_11 | domMethods_12 | domMethods_13 | domMethods_14 | domMethods_15;
export interface domMethods_1 {
    kind: ASTKinds.domMethods_1;
}
export interface domMethods_2 {
    kind: ASTKinds.domMethods_2;
}
export interface domMethods_3 {
    kind: ASTKinds.domMethods_3;
}
export interface domMethods_4 {
    kind: ASTKinds.domMethods_4;
}
export interface domMethods_5 {
    kind: ASTKinds.domMethods_5;
}
export interface domMethods_6 {
    kind: ASTKinds.domMethods_6;
}
export interface domMethods_7 {
    kind: ASTKinds.domMethods_7;
}
export interface domMethods_8 {
    kind: ASTKinds.domMethods_8;
}
export interface domMethods_9 {
    kind: ASTKinds.domMethods_9;
}
export interface domMethods_10 {
    kind: ASTKinds.domMethods_10;
}
export interface domMethods_11 {
    kind: ASTKinds.domMethods_11;
}
export interface domMethods_12 {
    kind: ASTKinds.domMethods_12;
}
export interface domMethods_13 {
    kind: ASTKinds.domMethods_13;
}
export interface domMethods_14 {
    kind: ASTKinds.domMethods_14;
}
export interface domMethods_15 {
    kind: ASTKinds.domMethods_15;
}
export type cypressOtherMethods = cypressOtherMethods_1 | cypressOtherMethods_2 | cypressOtherMethods_3 | cypressOtherMethods_4 | cypressOtherMethods_5 | cypressOtherMethods_6 | cypressOtherMethods_7 | cypressOtherMethods_8 | cypressOtherMethods_9;
export interface cypressOtherMethods_1 {
    kind: ASTKinds.cypressOtherMethods_1;
}
export interface cypressOtherMethods_2 {
    kind: ASTKinds.cypressOtherMethods_2;
}
export interface cypressOtherMethods_3 {
    kind: ASTKinds.cypressOtherMethods_3;
}
export interface cypressOtherMethods_4 {
    kind: ASTKinds.cypressOtherMethods_4;
}
export interface cypressOtherMethods_5 {
    kind: ASTKinds.cypressOtherMethods_5;
}
export interface cypressOtherMethods_6 {
    kind: ASTKinds.cypressOtherMethods_6;
}
export interface cypressOtherMethods_7 {
    kind: ASTKinds.cypressOtherMethods_7;
}
export interface cypressOtherMethods_8 {
    kind: ASTKinds.cypressOtherMethods_8;
}
export interface cypressOtherMethods_9 {
    kind: ASTKinds.cypressOtherMethods_9;
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchelement($$dpth: number, $$cr?: ErrorTracker): Nullable<element> {
        return this.choice<element>([
            () => this.matchelement_1($$dpth + 1, $$cr),
            () => this.matchelement_2($$dpth + 1, $$cr),
            () => this.matchelement_3($$dpth + 1, $$cr),
            () => this.matchelement_4($$dpth + 1, $$cr),
        ]);
    }
    public matchelement_1($$dpth: number, $$cr?: ErrorTracker): Nullable<element_1> {
        return this.matchvueDecorator($$dpth + 1, $$cr);
    }
    public matchelement_2($$dpth: number, $$cr?: ErrorTracker): Nullable<element_2> {
        return this.matchmeteorFunction($$dpth + 1, $$cr);
    }
    public matchelement_3($$dpth: number, $$cr?: ErrorTracker): Nullable<element_3> {
        return this.matchvueRouter($$dpth + 1, $$cr);
    }
    public matchelement_4($$dpth: number, $$cr?: ErrorTracker): Nullable<element_4> {
        return this.matchcypress($$dpth + 1, $$cr);
    }
    public matchvueDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator> {
        return this.choice<vueDecorator>([
            () => this.matchvueDecorator_1($$dpth + 1, $$cr),
            () => this.matchvueDecorator_2($$dpth + 1, $$cr),
            () => this.matchvueDecorator_3($$dpth + 1, $$cr),
            () => this.matchvueDecorator_4($$dpth + 1, $$cr),
            () => this.matchvueDecorator_5($$dpth + 1, $$cr),
            () => this.matchvueDecorator_6($$dpth + 1, $$cr),
            () => this.matchvueDecorator_7($$dpth + 1, $$cr),
            () => this.matchvueDecorator_8($$dpth + 1, $$cr),
            () => this.matchvueDecorator_9($$dpth + 1, $$cr),
        ]);
    }
    public matchvueDecorator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_1> {
        return this.regexAccept(String.raw`(?:Mixins)`, $$dpth + 1, $$cr);
    }
    public matchvueDecorator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_2> {
        return this.matchpropDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_3> {
        return this.matchmodelDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_4($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_4> {
        return this.matchwatchDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_5($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_5> {
        return this.matchprovideDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_6($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_6> {
        return this.matchinjectDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_7($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_7> {
        return this.matchemitDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_8($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_8> {
        return this.matchrefDecorator($$dpth + 1, $$cr);
    }
    public matchvueDecorator_9($$dpth: number, $$cr?: ErrorTracker): Nullable<vueDecorator_9> {
        return this.matchcomponentDecorator($$dpth + 1, $$cr);
    }
    public matchpropDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<propDecorator> {
        return this.choice<propDecorator>([
            () => this.matchpropDecorator_1($$dpth + 1, $$cr),
            () => this.matchpropDecorator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchpropDecorator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<propDecorator_1> {
        return this.run<propDecorator_1>($$dpth,
            () => {
                let $$res: Nullable<propDecorator_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@Prop)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.propDecorator_1, };
                }
                return $$res;
            });
    }
    public matchpropDecorator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<propDecorator_2> {
        return this.run<propDecorator_2>($$dpth,
            () => {
                let $$res: Nullable<propDecorator_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@PropSync)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.propDecorator_2, };
                }
                return $$res;
            });
    }
    public matchmodelDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<modelDecorator> {
        return this.choice<modelDecorator>([
            () => this.matchmodelDecorator_1($$dpth + 1, $$cr),
            () => this.matchmodelDecorator_2($$dpth + 1, $$cr),
            () => this.matchmodelDecorator_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmodelDecorator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<modelDecorator_1> {
        return this.run<modelDecorator_1>($$dpth,
            () => {
                let $$res: Nullable<modelDecorator_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@Model)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.modelDecorator_1, };
                }
                return $$res;
            });
    }
    public matchmodelDecorator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<modelDecorator_2> {
        return this.run<modelDecorator_2>($$dpth,
            () => {
                let $$res: Nullable<modelDecorator_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@ModelSync)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.modelDecorator_2, };
                }
                return $$res;
            });
    }
    public matchmodelDecorator_3($$dpth: number, $$cr?: ErrorTracker): Nullable<modelDecorator_3> {
        return this.regexAccept(String.raw`(?:@VModel)`, $$dpth + 1, $$cr);
    }
    public matchwatchDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<watchDecorator> {
        return this.regexAccept(String.raw`(?:@Watch)`, $$dpth + 1, $$cr);
    }
    public matchprovideDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<provideDecorator> {
        return this.choice<provideDecorator>([
            () => this.matchprovideDecorator_1($$dpth + 1, $$cr),
            () => this.matchprovideDecorator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchprovideDecorator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<provideDecorator_1> {
        return this.run<provideDecorator_1>($$dpth,
            () => {
                let $$res: Nullable<provideDecorator_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@Provide)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.provideDecorator_1, };
                }
                return $$res;
            });
    }
    public matchprovideDecorator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<provideDecorator_2> {
        return this.run<provideDecorator_2>($$dpth,
            () => {
                let $$res: Nullable<provideDecorator_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@ProvideReactive)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.provideDecorator_2, };
                }
                return $$res;
            });
    }
    public matchinjectDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<injectDecorator> {
        return this.choice<injectDecorator>([
            () => this.matchinjectDecorator_1($$dpth + 1, $$cr),
            () => this.matchinjectDecorator_2($$dpth + 1, $$cr),
        ]);
    }
    public matchinjectDecorator_1($$dpth: number, $$cr?: ErrorTracker): Nullable<injectDecorator_1> {
        return this.run<injectDecorator_1>($$dpth,
            () => {
                let $$res: Nullable<injectDecorator_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@Inject)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.injectDecorator_1, };
                }
                return $$res;
            });
    }
    public matchinjectDecorator_2($$dpth: number, $$cr?: ErrorTracker): Nullable<injectDecorator_2> {
        return this.run<injectDecorator_2>($$dpth,
            () => {
                let $$res: Nullable<injectDecorator_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@InjectReactive)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.injectDecorator_2, };
                }
                return $$res;
            });
    }
    public matchemitDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<emitDecorator> {
        return this.regexAccept(String.raw`(?:@Emit)`, $$dpth + 1, $$cr);
    }
    public matchrefDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<refDecorator> {
        return this.regexAccept(String.raw`(?:@Ref)`, $$dpth + 1, $$cr);
    }
    public matchcomponentDecorator($$dpth: number, $$cr?: ErrorTracker): Nullable<componentDecorator> {
        return this.regexAccept(String.raw`(?:@Component)`, $$dpth + 1, $$cr);
    }
    public matchmeteorFunction($$dpth: number, $$cr?: ErrorTracker): Nullable<meteorFunction> {
        return this.run<meteorFunction>($$dpth,
            () => {
                let $$res: Nullable<meteorFunction> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Meteor[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchmeteorMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.meteorFunction, };
                }
                return $$res;
            });
    }
    public matchmeteorMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<meteorMethods> {
        return this.choice<meteorMethods>([
            () => this.matchmeteorMethods_1($$dpth + 1, $$cr),
            () => this.matchmeteorMethods_2($$dpth + 1, $$cr),
            () => this.matchmeteorMethods_3($$dpth + 1, $$cr),
        ]);
    }
    public matchmeteorMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<meteorMethods_1> {
        return this.regexAccept(String.raw`(?:startup)`, $$dpth + 1, $$cr);
    }
    public matchmeteorMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<meteorMethods_2> {
        return this.regexAccept(String.raw`(?:methods)`, $$dpth + 1, $$cr);
    }
    public matchmeteorMethods_3($$dpth: number, $$cr?: ErrorTracker): Nullable<meteorMethods_3> {
        return this.regexAccept(String.raw`(?:publish)`, $$dpth + 1, $$cr);
    }
    public matchvueRouter($$dpth: number, $$cr?: ErrorTracker): Nullable<vueRouter> {
        return this.run<vueRouter>($$dpth,
            () => {
                let $$res: Nullable<vueRouter> = null;
                if (true
                    && this.regexAccept(String.raw`(?:new VueRouter)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vueRouter, };
                }
                return $$res;
            });
    }
    public matchcypress($$dpth: number, $$cr?: ErrorTracker): Nullable<cypress> {
        return this.run<cypress>($$dpth,
            () => {
                let $$res: Nullable<cypress> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Cypress[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchcypressMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypress, };
                }
                return $$res;
            });
    }
    public matchcypressMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods> {
        return this.choice<cypressMethods>([
            () => this.matchcypressMethods_1($$dpth + 1, $$cr),
            () => this.matchcypressMethods_2($$dpth + 1, $$cr),
            () => this.matchcypressMethods_3($$dpth + 1, $$cr),
            () => this.matchcypressMethods_4($$dpth + 1, $$cr),
            () => this.matchcypressMethods_5($$dpth + 1, $$cr),
            () => this.matchcypressMethods_6($$dpth + 1, $$cr),
            () => this.matchcypressMethods_7($$dpth + 1, $$cr),
            () => this.matchcypressMethods_8($$dpth + 1, $$cr),
        ]);
    }
    public matchcypressMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_1> {
        return this.run<cypressMethods_1>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_1> = null;
                if (true
                    && this.matchcypressCommands($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_1, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_2> {
        return this.run<cypressMethods_2>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_2> = null;
                if (true
                    && this.matchcypressCookies($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_2, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_3($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_3> {
        return this.run<cypressMethods_3>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_3> = null;
                if (true
                    && this.matchcypressScreenshot($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_3, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_4($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_4> {
        return this.run<cypressMethods_4>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_4> = null;
                if (true
                    && this.matchcypressSelectorPlayground($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_4, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_5($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_5> {
        return this.run<cypressMethods_5>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_5> = null;
                if (true
                    && this.matchcypressServer($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_5, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_6($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_6> {
        return this.run<cypressMethods_6>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_6> = null;
                if (true
                    && this.matchcypressAttribs($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_6, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_7($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_7> {
        return this.run<cypressMethods_7>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_7> = null;
                if (true
                    && this.matchcypressDom($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_7, };
                }
                return $$res;
            });
    }
    public matchcypressMethods_8($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressMethods_8> {
        return this.run<cypressMethods_8>($$dpth,
            () => {
                let $$res: Nullable<cypressMethods_8> = null;
                if (true
                    && this.matchcypressOtherMethods($$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressMethods_8, };
                }
                return $$res;
            });
    }
    public matchcypressCommands($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressCommands> {
        return this.run<cypressCommands>($$dpth,
            () => {
                let $$res: Nullable<cypressCommands> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Commands)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchcommandsMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressCommands, };
                }
                return $$res;
            });
    }
    public matchcommandsMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<commandsMethods> {
        return this.choice<commandsMethods>([
            () => this.matchcommandsMethods_1($$dpth + 1, $$cr),
            () => this.matchcommandsMethods_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcommandsMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<commandsMethods_1> {
        return this.run<commandsMethods_1>($$dpth,
            () => {
                let $$res: Nullable<commandsMethods_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:add)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.commandsMethods_1, };
                }
                return $$res;
            });
    }
    public matchcommandsMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<commandsMethods_2> {
        return this.run<commandsMethods_2>($$dpth,
            () => {
                let $$res: Nullable<commandsMethods_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:overwrite)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.commandsMethods_2, };
                }
                return $$res;
            });
    }
    public matchcypressCookies($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressCookies> {
        return this.run<cypressCookies>($$dpth,
            () => {
                let $$res: Nullable<cypressCookies> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Cookies)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchcookiesMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressCookies, };
                }
                return $$res;
            });
    }
    public matchcookiesMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<cookiesMethods> {
        return this.choice<cookiesMethods>([
            () => this.matchcookiesMethods_1($$dpth + 1, $$cr),
            () => this.matchcookiesMethods_2($$dpth + 1, $$cr),
            () => this.matchcookiesMethods_3($$dpth + 1, $$cr),
        ]);
    }
    public matchcookiesMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cookiesMethods_1> {
        return this.run<cookiesMethods_1>($$dpth,
            () => {
                let $$res: Nullable<cookiesMethods_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:debug)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cookiesMethods_1, };
                }
                return $$res;
            });
    }
    public matchcookiesMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cookiesMethods_2> {
        return this.run<cookiesMethods_2>($$dpth,
            () => {
                let $$res: Nullable<cookiesMethods_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:preserveOnce)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cookiesMethods_2, };
                }
                return $$res;
            });
    }
    public matchcookiesMethods_3($$dpth: number, $$cr?: ErrorTracker): Nullable<cookiesMethods_3> {
        return this.run<cookiesMethods_3>($$dpth,
            () => {
                let $$res: Nullable<cookiesMethods_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:defaults)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cookiesMethods_3, };
                }
                return $$res;
            });
    }
    public matchcypressScreenshot($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressScreenshot> {
        return this.run<cypressScreenshot>($$dpth,
            () => {
                let $$res: Nullable<cypressScreenshot> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Screenshot)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[.])`, $$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:defaults)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.cypressScreenshot, };
                }
                return $$res;
            });
    }
    public matchcypressSelectorPlayground($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressSelectorPlayground> {
        return this.run<cypressSelectorPlayground>($$dpth,
            () => {
                let $$res: Nullable<cypressSelectorPlayground> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SelectorPlayground[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchselectorPlaygroundMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressSelectorPlayground, };
                }
                return $$res;
            });
    }
    public matchselectorPlaygroundMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorPlaygroundMethods> {
        return this.choice<selectorPlaygroundMethods>([
            () => this.matchselectorPlaygroundMethods_1($$dpth + 1, $$cr),
            () => this.matchselectorPlaygroundMethods_2($$dpth + 1, $$cr),
        ]);
    }
    public matchselectorPlaygroundMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorPlaygroundMethods_1> {
        return this.run<selectorPlaygroundMethods_1>($$dpth,
            () => {
                let $$res: Nullable<selectorPlaygroundMethods_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:defaults)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.selectorPlaygroundMethods_1, };
                }
                return $$res;
            });
    }
    public matchselectorPlaygroundMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<selectorPlaygroundMethods_2> {
        return this.run<selectorPlaygroundMethods_2>($$dpth,
            () => {
                let $$res: Nullable<selectorPlaygroundMethods_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:getSelector)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.selectorPlaygroundMethods_2, };
                }
                return $$res;
            });
    }
    public matchcypressServer($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressServer> {
        return this.run<cypressServer>($$dpth,
            () => {
                let $$res: Nullable<cypressServer> = null;
                if (true
                    && this.regexAccept(String.raw`(?:Server.defaults)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressServer, };
                }
                return $$res;
            });
    }
    public matchcypressAttribs($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressAttribs> {
        return this.choice<cypressAttribs>([
            () => this.matchcypressAttribs_1($$dpth + 1, $$cr),
            () => this.matchcypressAttribs_2($$dpth + 1, $$cr),
        ]);
    }
    public matchcypressAttribs_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressAttribs_1> {
        return this.run<cypressAttribs_1>($$dpth,
            () => {
                let $$res: Nullable<cypressAttribs_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:arch)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressAttribs_1, };
                }
                return $$res;
            });
    }
    public matchcypressAttribs_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressAttribs_2> {
        return this.run<cypressAttribs_2>($$dpth,
            () => {
                let $$res: Nullable<cypressAttribs_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:browser)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressAttribs_2, };
                }
                return $$res;
            });
    }
    public matchcypressDom($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressDom> {
        return this.run<cypressDom>($$dpth,
            () => {
                let $$res: Nullable<cypressDom> = null;
                if (true
                    && this.regexAccept(String.raw`(?:dom[.])`, $$dpth + 1, $$cr) !== null
                    && this.matchdomMethods($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressDom, };
                }
                return $$res;
            });
    }
    public matchdomMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods> {
        return this.choice<domMethods>([
            () => this.matchdomMethods_1($$dpth + 1, $$cr),
            () => this.matchdomMethods_2($$dpth + 1, $$cr),
            () => this.matchdomMethods_3($$dpth + 1, $$cr),
            () => this.matchdomMethods_4($$dpth + 1, $$cr),
            () => this.matchdomMethods_5($$dpth + 1, $$cr),
            () => this.matchdomMethods_6($$dpth + 1, $$cr),
            () => this.matchdomMethods_7($$dpth + 1, $$cr),
            () => this.matchdomMethods_8($$dpth + 1, $$cr),
            () => this.matchdomMethods_9($$dpth + 1, $$cr),
            () => this.matchdomMethods_10($$dpth + 1, $$cr),
            () => this.matchdomMethods_11($$dpth + 1, $$cr),
            () => this.matchdomMethods_12($$dpth + 1, $$cr),
            () => this.matchdomMethods_13($$dpth + 1, $$cr),
            () => this.matchdomMethods_14($$dpth + 1, $$cr),
            () => this.matchdomMethods_15($$dpth + 1, $$cr),
        ]);
    }
    public matchdomMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_1> {
        return this.run<domMethods_1>($$dpth,
            () => {
                let $$res: Nullable<domMethods_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isHidden)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_1, };
                }
                return $$res;
            });
    }
    public matchdomMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_2> {
        return this.run<domMethods_2>($$dpth,
            () => {
                let $$res: Nullable<domMethods_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isAttached)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_2, };
                }
                return $$res;
            });
    }
    public matchdomMethods_3($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_3> {
        return this.run<domMethods_3>($$dpth,
            () => {
                let $$res: Nullable<domMethods_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isDescendent)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_3, };
                }
                return $$res;
            });
    }
    public matchdomMethods_4($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_4> {
        return this.run<domMethods_4>($$dpth,
            () => {
                let $$res: Nullable<domMethods_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isDetached)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_4, };
                }
                return $$res;
            });
    }
    public matchdomMethods_5($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_5> {
        return this.run<domMethods_5>($$dpth,
            () => {
                let $$res: Nullable<domMethods_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isDocument)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_5, };
                }
                return $$res;
            });
    }
    public matchdomMethods_6($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_6> {
        return this.run<domMethods_6>($$dpth,
            () => {
                let $$res: Nullable<domMethods_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isDom)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_6, };
                }
                return $$res;
            });
    }
    public matchdomMethods_7($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_7> {
        return this.run<domMethods_7>($$dpth,
            () => {
                let $$res: Nullable<domMethods_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isElement)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_7, };
                }
                return $$res;
            });
    }
    public matchdomMethods_8($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_8> {
        return this.run<domMethods_8>($$dpth,
            () => {
                let $$res: Nullable<domMethods_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isFocusable)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_8, };
                }
                return $$res;
            });
    }
    public matchdomMethods_9($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_9> {
        return this.run<domMethods_9>($$dpth,
            () => {
                let $$res: Nullable<domMethods_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isFocused)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_9, };
                }
                return $$res;
            });
    }
    public matchdomMethods_10($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_10> {
        return this.run<domMethods_10>($$dpth,
            () => {
                let $$res: Nullable<domMethods_10> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isJquery)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_10, };
                }
                return $$res;
            });
    }
    public matchdomMethods_11($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_11> {
        return this.run<domMethods_11>($$dpth,
            () => {
                let $$res: Nullable<domMethods_11> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isScrollable)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_11, };
                }
                return $$res;
            });
    }
    public matchdomMethods_12($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_12> {
        return this.run<domMethods_12>($$dpth,
            () => {
                let $$res: Nullable<domMethods_12> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isVisible)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_12, };
                }
                return $$res;
            });
    }
    public matchdomMethods_13($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_13> {
        return this.run<domMethods_13>($$dpth,
            () => {
                let $$res: Nullable<domMethods_13> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isWindow)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_13, };
                }
                return $$res;
            });
    }
    public matchdomMethods_14($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_14> {
        return this.run<domMethods_14>($$dpth,
            () => {
                let $$res: Nullable<domMethods_14> = null;
                if (true
                    && this.regexAccept(String.raw`(?:unwrap)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_14, };
                }
                return $$res;
            });
    }
    public matchdomMethods_15($$dpth: number, $$cr?: ErrorTracker): Nullable<domMethods_15> {
        return this.run<domMethods_15>($$dpth,
            () => {
                let $$res: Nullable<domMethods_15> = null;
                if (true
                    && this.regexAccept(String.raw`(?:wrap)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.domMethods_15, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods> {
        return this.choice<cypressOtherMethods>([
            () => this.matchcypressOtherMethods_1($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_2($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_3($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_4($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_5($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_6($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_7($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_8($$dpth + 1, $$cr),
            () => this.matchcypressOtherMethods_9($$dpth + 1, $$cr),
        ]);
    }
    public matchcypressOtherMethods_1($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_1> {
        return this.run<cypressOtherMethods_1>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isBrowser)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_1, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_2($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_2> {
        return this.run<cypressOtherMethods_2>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:isCy)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_2, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_3($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_3> {
        return this.run<cypressOtherMethods_3>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:log)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_3, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_4($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_4> {
        return this.run<cypressOtherMethods_4>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_4> = null;
                if (true
                    && this.regexAccept(String.raw`(?:platform)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_4, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_5($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_5> {
        return this.run<cypressOtherMethods_5>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_5> = null;
                if (true
                    && this.regexAccept(String.raw`(?:spec)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_5, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_6($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_6> {
        return this.run<cypressOtherMethods_6>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_6> = null;
                if (true
                    && this.regexAccept(String.raw`(?:testingType)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_6, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_7($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_7> {
        return this.run<cypressOtherMethods_7>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_7> = null;
                if (true
                    && this.regexAccept(String.raw`(?:version)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_7, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_8($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_8> {
        return this.run<cypressOtherMethods_8>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_8> = null;
                if (true
                    && this.regexAccept(String.raw`(?:config)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_8, };
                }
                return $$res;
            });
    }
    public matchcypressOtherMethods_9($$dpth: number, $$cr?: ErrorTracker): Nullable<cypressOtherMethods_9> {
        return this.run<cypressOtherMethods_9>($$dpth,
            () => {
                let $$res: Nullable<cypressOtherMethods_9> = null;
                if (true
                    && this.regexAccept(String.raw`(?:env)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.cypressOtherMethods_9, };
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchelement(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchelement(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchelement(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<element>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}