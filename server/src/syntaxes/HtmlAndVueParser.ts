/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* htmlVueElement := htmlElements | vueElements | othersVueElements
* htmlElements := a | div | img | input | span | 'class' | id | type | name | placeholder | value
* vueElements := tag | slot | scope | ref | vBind | vClass | vCloak | vIf | vElse | vFor | vHtml | vModel | vOn | vPre | vRouterView | vShow | vSrc | vStyle | vText | vTo
* othersVueElements := transition | appear | component | enter | keepAlive | leave
* key := ':key'$
* a := 'a'$
* appear := 'appear-active-class'$ | 'appear-class'$ | 'appear-to-class'$
* component := 'component'$
* div := 'div'$
* enter := 'enter-active-class'$ | 'enter-class'$ | 'enter-to-class'$
* img := 'img'$
* input := 'input'$
* keepAlive := 'keep-alive'$
* leave := 'leave-active-class'$ | 'leave-class'$ | 'leave-to-class'$
* ref := 'ref'$
* routerLink := 'router-link'$
* scope := 'scope'$
* slot := 'slot'$ | 'slot:scope'$
* span := 'span'$
* tag := 'tag'$
* transition := 'transition'$ | 'transition-group'$
* vBind := 'v-bind'$
* vCloak := 'v-cloak'$
* vElse := 'v-else'$ | 'v-else-if'$
* vFor := 'v-for'$
* vHtml := 'v-html'$
* vIf := 'v-if'$
* vModel := 'v-model'$
* vOn := 'v-on'$ | 'v-once'$
* vPre := 'v-pre'$
* vShow := 'v-show'$
* vText := 'v-text'$
* vRouterView := 'router-view'$
* vTo := 'to'$
* vSrc := ':src'$
* vStyle := ':style'$
* vClass := ':class'$
* id := 'id'$
* type := 'type'$
* name := 'name'$
* placeholder := 'placeholder'$
* value := 'value'$
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    htmlVueElement_1 = "htmlVueElement_1",
    htmlVueElement_2 = "htmlVueElement_2",
    htmlVueElement_3 = "htmlVueElement_3",
    htmlElements_1 = "htmlElements_1",
    htmlElements_2 = "htmlElements_2",
    htmlElements_3 = "htmlElements_3",
    htmlElements_4 = "htmlElements_4",
    htmlElements_5 = "htmlElements_5",
    htmlElements_6 = "htmlElements_6",
    htmlElements_7 = "htmlElements_7",
    htmlElements_8 = "htmlElements_8",
    htmlElements_9 = "htmlElements_9",
    htmlElements_10 = "htmlElements_10",
    htmlElements_11 = "htmlElements_11",
    vueElements_1 = "vueElements_1",
    vueElements_2 = "vueElements_2",
    vueElements_3 = "vueElements_3",
    vueElements_4 = "vueElements_4",
    vueElements_5 = "vueElements_5",
    vueElements_6 = "vueElements_6",
    vueElements_7 = "vueElements_7",
    vueElements_8 = "vueElements_8",
    vueElements_9 = "vueElements_9",
    vueElements_10 = "vueElements_10",
    vueElements_11 = "vueElements_11",
    vueElements_12 = "vueElements_12",
    vueElements_13 = "vueElements_13",
    vueElements_14 = "vueElements_14",
    vueElements_15 = "vueElements_15",
    vueElements_16 = "vueElements_16",
    vueElements_17 = "vueElements_17",
    vueElements_18 = "vueElements_18",
    vueElements_19 = "vueElements_19",
    vueElements_20 = "vueElements_20",
    othersVueElements_1 = "othersVueElements_1",
    othersVueElements_2 = "othersVueElements_2",
    othersVueElements_3 = "othersVueElements_3",
    othersVueElements_4 = "othersVueElements_4",
    othersVueElements_5 = "othersVueElements_5",
    othersVueElements_6 = "othersVueElements_6",
    key = "key",
    a = "a",
    appear_1 = "appear_1",
    appear_2 = "appear_2",
    appear_3 = "appear_3",
    component = "component",
    div = "div",
    enter_1 = "enter_1",
    enter_2 = "enter_2",
    enter_3 = "enter_3",
    img = "img",
    input = "input",
    keepAlive = "keepAlive",
    leave_1 = "leave_1",
    leave_2 = "leave_2",
    leave_3 = "leave_3",
    ref = "ref",
    routerLink = "routerLink",
    scope = "scope",
    slot_1 = "slot_1",
    slot_2 = "slot_2",
    span = "span",
    tag = "tag",
    transition_1 = "transition_1",
    transition_2 = "transition_2",
    vBind = "vBind",
    vCloak = "vCloak",
    vElse_1 = "vElse_1",
    vElse_2 = "vElse_2",
    vFor = "vFor",
    vHtml = "vHtml",
    vIf = "vIf",
    vModel = "vModel",
    vOn_1 = "vOn_1",
    vOn_2 = "vOn_2",
    vPre = "vPre",
    vShow = "vShow",
    vText = "vText",
    vRouterView = "vRouterView",
    vTo = "vTo",
    vSrc = "vSrc",
    vStyle = "vStyle",
    vClass = "vClass",
    id = "id",
    type = "type",
    name = "name",
    placeholder = "placeholder",
    value = "value",
    $EOF = "$EOF",
}
export type htmlVueElement = htmlVueElement_1 | htmlVueElement_2 | htmlVueElement_3;
export type htmlVueElement_1 = htmlElements;
export type htmlVueElement_2 = vueElements;
export type htmlVueElement_3 = othersVueElements;
export type htmlElements = htmlElements_1 | htmlElements_2 | htmlElements_3 | htmlElements_4 | htmlElements_5 | htmlElements_6 | htmlElements_7 | htmlElements_8 | htmlElements_9 | htmlElements_10 | htmlElements_11;
export type htmlElements_1 = a;
export type htmlElements_2 = div;
export type htmlElements_3 = img;
export type htmlElements_4 = input;
export type htmlElements_5 = span;
export type htmlElements_6 = string;
export type htmlElements_7 = id;
export type htmlElements_8 = type;
export type htmlElements_9 = name;
export type htmlElements_10 = placeholder;
export type htmlElements_11 = value;
export type vueElements = vueElements_1 | vueElements_2 | vueElements_3 | vueElements_4 | vueElements_5 | vueElements_6 | vueElements_7 | vueElements_8 | vueElements_9 | vueElements_10 | vueElements_11 | vueElements_12 | vueElements_13 | vueElements_14 | vueElements_15 | vueElements_16 | vueElements_17 | vueElements_18 | vueElements_19 | vueElements_20;
export type vueElements_1 = tag;
export type vueElements_2 = slot;
export type vueElements_3 = scope;
export type vueElements_4 = ref;
export type vueElements_5 = vBind;
export type vueElements_6 = vClass;
export type vueElements_7 = vCloak;
export type vueElements_8 = vIf;
export type vueElements_9 = vElse;
export type vueElements_10 = vFor;
export type vueElements_11 = vHtml;
export type vueElements_12 = vModel;
export type vueElements_13 = vOn;
export type vueElements_14 = vPre;
export type vueElements_15 = vRouterView;
export type vueElements_16 = vShow;
export type vueElements_17 = vSrc;
export type vueElements_18 = vStyle;
export type vueElements_19 = vText;
export type vueElements_20 = vTo;
export type othersVueElements = othersVueElements_1 | othersVueElements_2 | othersVueElements_3 | othersVueElements_4 | othersVueElements_5 | othersVueElements_6;
export type othersVueElements_1 = transition;
export type othersVueElements_2 = appear;
export type othersVueElements_3 = component;
export type othersVueElements_4 = enter;
export type othersVueElements_5 = keepAlive;
export type othersVueElements_6 = leave;
export interface key {
    kind: ASTKinds.key;
}
export interface a {
    kind: ASTKinds.a;
}
export type appear = appear_1 | appear_2 | appear_3;
export interface appear_1 {
    kind: ASTKinds.appear_1;
}
export interface appear_2 {
    kind: ASTKinds.appear_2;
}
export interface appear_3 {
    kind: ASTKinds.appear_3;
}
export interface component {
    kind: ASTKinds.component;
}
export interface div {
    kind: ASTKinds.div;
}
export type enter = enter_1 | enter_2 | enter_3;
export interface enter_1 {
    kind: ASTKinds.enter_1;
}
export interface enter_2 {
    kind: ASTKinds.enter_2;
}
export interface enter_3 {
    kind: ASTKinds.enter_3;
}
export interface img {
    kind: ASTKinds.img;
}
export interface input {
    kind: ASTKinds.input;
}
export interface keepAlive {
    kind: ASTKinds.keepAlive;
}
export type leave = leave_1 | leave_2 | leave_3;
export interface leave_1 {
    kind: ASTKinds.leave_1;
}
export interface leave_2 {
    kind: ASTKinds.leave_2;
}
export interface leave_3 {
    kind: ASTKinds.leave_3;
}
export interface ref {
    kind: ASTKinds.ref;
}
export interface routerLink {
    kind: ASTKinds.routerLink;
}
export interface scope {
    kind: ASTKinds.scope;
}
export type slot = slot_1 | slot_2;
export interface slot_1 {
    kind: ASTKinds.slot_1;
}
export interface slot_2 {
    kind: ASTKinds.slot_2;
}
export interface span {
    kind: ASTKinds.span;
}
export interface tag {
    kind: ASTKinds.tag;
}
export type transition = transition_1 | transition_2;
export interface transition_1 {
    kind: ASTKinds.transition_1;
}
export interface transition_2 {
    kind: ASTKinds.transition_2;
}
export interface vBind {
    kind: ASTKinds.vBind;
}
export interface vCloak {
    kind: ASTKinds.vCloak;
}
export type vElse = vElse_1 | vElse_2;
export interface vElse_1 {
    kind: ASTKinds.vElse_1;
}
export interface vElse_2 {
    kind: ASTKinds.vElse_2;
}
export interface vFor {
    kind: ASTKinds.vFor;
}
export interface vHtml {
    kind: ASTKinds.vHtml;
}
export interface vIf {
    kind: ASTKinds.vIf;
}
export interface vModel {
    kind: ASTKinds.vModel;
}
export type vOn = vOn_1 | vOn_2;
export interface vOn_1 {
    kind: ASTKinds.vOn_1;
}
export interface vOn_2 {
    kind: ASTKinds.vOn_2;
}
export interface vPre {
    kind: ASTKinds.vPre;
}
export interface vShow {
    kind: ASTKinds.vShow;
}
export interface vText {
    kind: ASTKinds.vText;
}
export interface vRouterView {
    kind: ASTKinds.vRouterView;
}
export interface vTo {
    kind: ASTKinds.vTo;
}
export interface vSrc {
    kind: ASTKinds.vSrc;
}
export interface vStyle {
    kind: ASTKinds.vStyle;
}
export interface vClass {
    kind: ASTKinds.vClass;
}
export interface id {
    kind: ASTKinds.id;
}
export interface type {
    kind: ASTKinds.type;
}
export interface name {
    kind: ASTKinds.name;
}
export interface placeholder {
    kind: ASTKinds.placeholder;
}
export interface value {
    kind: ASTKinds.value;
}
export class HtmlAndVueParser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchhtmlVueElement($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlVueElement> {
        return this.choice<htmlVueElement>([
            () => this.matchhtmlVueElement_1($$dpth + 1, $$cr),
            () => this.matchhtmlVueElement_2($$dpth + 1, $$cr),
            () => this.matchhtmlVueElement_3($$dpth + 1, $$cr),
        ]);
    }
    public matchhtmlVueElement_1($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlVueElement_1> {
        return this.matchhtmlElements($$dpth + 1, $$cr);
    }
    public matchhtmlVueElement_2($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlVueElement_2> {
        return this.matchvueElements($$dpth + 1, $$cr);
    }
    public matchhtmlVueElement_3($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlVueElement_3> {
        return this.matchothersVueElements($$dpth + 1, $$cr);
    }
    public matchhtmlElements($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements> {
        return this.choice<htmlElements>([
            () => this.matchhtmlElements_1($$dpth + 1, $$cr),
            () => this.matchhtmlElements_2($$dpth + 1, $$cr),
            () => this.matchhtmlElements_3($$dpth + 1, $$cr),
            () => this.matchhtmlElements_4($$dpth + 1, $$cr),
            () => this.matchhtmlElements_5($$dpth + 1, $$cr),
            () => this.matchhtmlElements_6($$dpth + 1, $$cr),
            () => this.matchhtmlElements_7($$dpth + 1, $$cr),
            () => this.matchhtmlElements_8($$dpth + 1, $$cr),
            () => this.matchhtmlElements_9($$dpth + 1, $$cr),
            () => this.matchhtmlElements_10($$dpth + 1, $$cr),
            () => this.matchhtmlElements_11($$dpth + 1, $$cr),
        ]);
    }
    public matchhtmlElements_1($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_1> {
        return this.matcha($$dpth + 1, $$cr);
    }
    public matchhtmlElements_2($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_2> {
        return this.matchdiv($$dpth + 1, $$cr);
    }
    public matchhtmlElements_3($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_3> {
        return this.matchimg($$dpth + 1, $$cr);
    }
    public matchhtmlElements_4($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_4> {
        return this.matchinput($$dpth + 1, $$cr);
    }
    public matchhtmlElements_5($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_5> {
        return this.matchspan($$dpth + 1, $$cr);
    }
    public matchhtmlElements_6($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_6> {
        return this.regexAccept(String.raw`(?:class)`, $$dpth + 1, $$cr);
    }
    public matchhtmlElements_7($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_7> {
        return this.matchid($$dpth + 1, $$cr);
    }
    public matchhtmlElements_8($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_8> {
        return this.matchtype($$dpth + 1, $$cr);
    }
    public matchhtmlElements_9($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_9> {
        return this.matchname($$dpth + 1, $$cr);
    }
    public matchhtmlElements_10($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_10> {
        return this.matchplaceholder($$dpth + 1, $$cr);
    }
    public matchhtmlElements_11($$dpth: number, $$cr?: ErrorTracker): Nullable<htmlElements_11> {
        return this.matchvalue($$dpth + 1, $$cr);
    }
    public matchvueElements($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements> {
        return this.choice<vueElements>([
            () => this.matchvueElements_1($$dpth + 1, $$cr),
            () => this.matchvueElements_2($$dpth + 1, $$cr),
            () => this.matchvueElements_3($$dpth + 1, $$cr),
            () => this.matchvueElements_4($$dpth + 1, $$cr),
            () => this.matchvueElements_5($$dpth + 1, $$cr),
            () => this.matchvueElements_6($$dpth + 1, $$cr),
            () => this.matchvueElements_7($$dpth + 1, $$cr),
            () => this.matchvueElements_8($$dpth + 1, $$cr),
            () => this.matchvueElements_9($$dpth + 1, $$cr),
            () => this.matchvueElements_10($$dpth + 1, $$cr),
            () => this.matchvueElements_11($$dpth + 1, $$cr),
            () => this.matchvueElements_12($$dpth + 1, $$cr),
            () => this.matchvueElements_13($$dpth + 1, $$cr),
            () => this.matchvueElements_14($$dpth + 1, $$cr),
            () => this.matchvueElements_15($$dpth + 1, $$cr),
            () => this.matchvueElements_16($$dpth + 1, $$cr),
            () => this.matchvueElements_17($$dpth + 1, $$cr),
            () => this.matchvueElements_18($$dpth + 1, $$cr),
            () => this.matchvueElements_19($$dpth + 1, $$cr),
            () => this.matchvueElements_20($$dpth + 1, $$cr),
        ]);
    }
    public matchvueElements_1($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_1> {
        return this.matchtag($$dpth + 1, $$cr);
    }
    public matchvueElements_2($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_2> {
        return this.matchslot($$dpth + 1, $$cr);
    }
    public matchvueElements_3($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_3> {
        return this.matchscope($$dpth + 1, $$cr);
    }
    public matchvueElements_4($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_4> {
        return this.matchref($$dpth + 1, $$cr);
    }
    public matchvueElements_5($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_5> {
        return this.matchvBind($$dpth + 1, $$cr);
    }
    public matchvueElements_6($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_6> {
        return this.matchvClass($$dpth + 1, $$cr);
    }
    public matchvueElements_7($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_7> {
        return this.matchvCloak($$dpth + 1, $$cr);
    }
    public matchvueElements_8($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_8> {
        return this.matchvIf($$dpth + 1, $$cr);
    }
    public matchvueElements_9($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_9> {
        return this.matchvElse($$dpth + 1, $$cr);
    }
    public matchvueElements_10($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_10> {
        return this.matchvFor($$dpth + 1, $$cr);
    }
    public matchvueElements_11($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_11> {
        return this.matchvHtml($$dpth + 1, $$cr);
    }
    public matchvueElements_12($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_12> {
        return this.matchvModel($$dpth + 1, $$cr);
    }
    public matchvueElements_13($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_13> {
        return this.matchvOn($$dpth + 1, $$cr);
    }
    public matchvueElements_14($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_14> {
        return this.matchvPre($$dpth + 1, $$cr);
    }
    public matchvueElements_15($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_15> {
        return this.matchvRouterView($$dpth + 1, $$cr);
    }
    public matchvueElements_16($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_16> {
        return this.matchvShow($$dpth + 1, $$cr);
    }
    public matchvueElements_17($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_17> {
        return this.matchvSrc($$dpth + 1, $$cr);
    }
    public matchvueElements_18($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_18> {
        return this.matchvStyle($$dpth + 1, $$cr);
    }
    public matchvueElements_19($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_19> {
        return this.matchvText($$dpth + 1, $$cr);
    }
    public matchvueElements_20($$dpth: number, $$cr?: ErrorTracker): Nullable<vueElements_20> {
        return this.matchvTo($$dpth + 1, $$cr);
    }
    public matchothersVueElements($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements> {
        return this.choice<othersVueElements>([
            () => this.matchothersVueElements_1($$dpth + 1, $$cr),
            () => this.matchothersVueElements_2($$dpth + 1, $$cr),
            () => this.matchothersVueElements_3($$dpth + 1, $$cr),
            () => this.matchothersVueElements_4($$dpth + 1, $$cr),
            () => this.matchothersVueElements_5($$dpth + 1, $$cr),
            () => this.matchothersVueElements_6($$dpth + 1, $$cr),
        ]);
    }
    public matchothersVueElements_1($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_1> {
        return this.matchtransition($$dpth + 1, $$cr);
    }
    public matchothersVueElements_2($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_2> {
        return this.matchappear($$dpth + 1, $$cr);
    }
    public matchothersVueElements_3($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_3> {
        return this.matchcomponent($$dpth + 1, $$cr);
    }
    public matchothersVueElements_4($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_4> {
        return this.matchenter($$dpth + 1, $$cr);
    }
    public matchothersVueElements_5($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_5> {
        return this.matchkeepAlive($$dpth + 1, $$cr);
    }
    public matchothersVueElements_6($$dpth: number, $$cr?: ErrorTracker): Nullable<othersVueElements_6> {
        return this.matchleave($$dpth + 1, $$cr);
    }
    public matchkey($$dpth: number, $$cr?: ErrorTracker): Nullable<key> {
        return this.run<key>($$dpth,
            () => {
                let $$res: Nullable<key> = null;
                if (true
                    && this.regexAccept(String.raw`(?::key)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.key, };
                }
                return $$res;
            });
    }
    public matcha($$dpth: number, $$cr?: ErrorTracker): Nullable<a> {
        return this.run<a>($$dpth,
            () => {
                let $$res: Nullable<a> = null;
                if (true
                    && this.regexAccept(String.raw`(?:a)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.a, };
                }
                return $$res;
            });
    }
    public matchappear($$dpth: number, $$cr?: ErrorTracker): Nullable<appear> {
        return this.choice<appear>([
            () => this.matchappear_1($$dpth + 1, $$cr),
            () => this.matchappear_2($$dpth + 1, $$cr),
            () => this.matchappear_3($$dpth + 1, $$cr),
        ]);
    }
    public matchappear_1($$dpth: number, $$cr?: ErrorTracker): Nullable<appear_1> {
        return this.run<appear_1>($$dpth,
            () => {
                let $$res: Nullable<appear_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:appear-active-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.appear_1, };
                }
                return $$res;
            });
    }
    public matchappear_2($$dpth: number, $$cr?: ErrorTracker): Nullable<appear_2> {
        return this.run<appear_2>($$dpth,
            () => {
                let $$res: Nullable<appear_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:appear-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.appear_2, };
                }
                return $$res;
            });
    }
    public matchappear_3($$dpth: number, $$cr?: ErrorTracker): Nullable<appear_3> {
        return this.run<appear_3>($$dpth,
            () => {
                let $$res: Nullable<appear_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:appear-to-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.appear_3, };
                }
                return $$res;
            });
    }
    public matchcomponent($$dpth: number, $$cr?: ErrorTracker): Nullable<component> {
        return this.run<component>($$dpth,
            () => {
                let $$res: Nullable<component> = null;
                if (true
                    && this.regexAccept(String.raw`(?:component)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.component, };
                }
                return $$res;
            });
    }
    public matchdiv($$dpth: number, $$cr?: ErrorTracker): Nullable<div> {
        return this.run<div>($$dpth,
            () => {
                let $$res: Nullable<div> = null;
                if (true
                    && this.regexAccept(String.raw`(?:div)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.div, };
                }
                return $$res;
            });
    }
    public matchenter($$dpth: number, $$cr?: ErrorTracker): Nullable<enter> {
        return this.choice<enter>([
            () => this.matchenter_1($$dpth + 1, $$cr),
            () => this.matchenter_2($$dpth + 1, $$cr),
            () => this.matchenter_3($$dpth + 1, $$cr),
        ]);
    }
    public matchenter_1($$dpth: number, $$cr?: ErrorTracker): Nullable<enter_1> {
        return this.run<enter_1>($$dpth,
            () => {
                let $$res: Nullable<enter_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:enter-active-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.enter_1, };
                }
                return $$res;
            });
    }
    public matchenter_2($$dpth: number, $$cr?: ErrorTracker): Nullable<enter_2> {
        return this.run<enter_2>($$dpth,
            () => {
                let $$res: Nullable<enter_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:enter-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.enter_2, };
                }
                return $$res;
            });
    }
    public matchenter_3($$dpth: number, $$cr?: ErrorTracker): Nullable<enter_3> {
        return this.run<enter_3>($$dpth,
            () => {
                let $$res: Nullable<enter_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:enter-to-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.enter_3, };
                }
                return $$res;
            });
    }
    public matchimg($$dpth: number, $$cr?: ErrorTracker): Nullable<img> {
        return this.run<img>($$dpth,
            () => {
                let $$res: Nullable<img> = null;
                if (true
                    && this.regexAccept(String.raw`(?:img)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.img, };
                }
                return $$res;
            });
    }
    public matchinput($$dpth: number, $$cr?: ErrorTracker): Nullable<input> {
        return this.run<input>($$dpth,
            () => {
                let $$res: Nullable<input> = null;
                if (true
                    && this.regexAccept(String.raw`(?:input)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.input, };
                }
                return $$res;
            });
    }
    public matchkeepAlive($$dpth: number, $$cr?: ErrorTracker): Nullable<keepAlive> {
        return this.run<keepAlive>($$dpth,
            () => {
                let $$res: Nullable<keepAlive> = null;
                if (true
                    && this.regexAccept(String.raw`(?:keep-alive)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.keepAlive, };
                }
                return $$res;
            });
    }
    public matchleave($$dpth: number, $$cr?: ErrorTracker): Nullable<leave> {
        return this.choice<leave>([
            () => this.matchleave_1($$dpth + 1, $$cr),
            () => this.matchleave_2($$dpth + 1, $$cr),
            () => this.matchleave_3($$dpth + 1, $$cr),
        ]);
    }
    public matchleave_1($$dpth: number, $$cr?: ErrorTracker): Nullable<leave_1> {
        return this.run<leave_1>($$dpth,
            () => {
                let $$res: Nullable<leave_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:leave-active-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.leave_1, };
                }
                return $$res;
            });
    }
    public matchleave_2($$dpth: number, $$cr?: ErrorTracker): Nullable<leave_2> {
        return this.run<leave_2>($$dpth,
            () => {
                let $$res: Nullable<leave_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:leave-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.leave_2, };
                }
                return $$res;
            });
    }
    public matchleave_3($$dpth: number, $$cr?: ErrorTracker): Nullable<leave_3> {
        return this.run<leave_3>($$dpth,
            () => {
                let $$res: Nullable<leave_3> = null;
                if (true
                    && this.regexAccept(String.raw`(?:leave-to-class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.leave_3, };
                }
                return $$res;
            });
    }
    public matchref($$dpth: number, $$cr?: ErrorTracker): Nullable<ref> {
        return this.run<ref>($$dpth,
            () => {
                let $$res: Nullable<ref> = null;
                if (true
                    && this.regexAccept(String.raw`(?:ref)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ref, };
                }
                return $$res;
            });
    }
    public matchrouterLink($$dpth: number, $$cr?: ErrorTracker): Nullable<routerLink> {
        return this.run<routerLink>($$dpth,
            () => {
                let $$res: Nullable<routerLink> = null;
                if (true
                    && this.regexAccept(String.raw`(?:router-link)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.routerLink, };
                }
                return $$res;
            });
    }
    public matchscope($$dpth: number, $$cr?: ErrorTracker): Nullable<scope> {
        return this.run<scope>($$dpth,
            () => {
                let $$res: Nullable<scope> = null;
                if (true
                    && this.regexAccept(String.raw`(?:scope)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.scope, };
                }
                return $$res;
            });
    }
    public matchslot($$dpth: number, $$cr?: ErrorTracker): Nullable<slot> {
        return this.choice<slot>([
            () => this.matchslot_1($$dpth + 1, $$cr),
            () => this.matchslot_2($$dpth + 1, $$cr),
        ]);
    }
    public matchslot_1($$dpth: number, $$cr?: ErrorTracker): Nullable<slot_1> {
        return this.run<slot_1>($$dpth,
            () => {
                let $$res: Nullable<slot_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:slot)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.slot_1, };
                }
                return $$res;
            });
    }
    public matchslot_2($$dpth: number, $$cr?: ErrorTracker): Nullable<slot_2> {
        return this.run<slot_2>($$dpth,
            () => {
                let $$res: Nullable<slot_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:slot:scope)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.slot_2, };
                }
                return $$res;
            });
    }
    public matchspan($$dpth: number, $$cr?: ErrorTracker): Nullable<span> {
        return this.run<span>($$dpth,
            () => {
                let $$res: Nullable<span> = null;
                if (true
                    && this.regexAccept(String.raw`(?:span)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.span, };
                }
                return $$res;
            });
    }
    public matchtag($$dpth: number, $$cr?: ErrorTracker): Nullable<tag> {
        return this.run<tag>($$dpth,
            () => {
                let $$res: Nullable<tag> = null;
                if (true
                    && this.regexAccept(String.raw`(?:tag)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.tag, };
                }
                return $$res;
            });
    }
    public matchtransition($$dpth: number, $$cr?: ErrorTracker): Nullable<transition> {
        return this.choice<transition>([
            () => this.matchtransition_1($$dpth + 1, $$cr),
            () => this.matchtransition_2($$dpth + 1, $$cr),
        ]);
    }
    public matchtransition_1($$dpth: number, $$cr?: ErrorTracker): Nullable<transition_1> {
        return this.run<transition_1>($$dpth,
            () => {
                let $$res: Nullable<transition_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:transition)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.transition_1, };
                }
                return $$res;
            });
    }
    public matchtransition_2($$dpth: number, $$cr?: ErrorTracker): Nullable<transition_2> {
        return this.run<transition_2>($$dpth,
            () => {
                let $$res: Nullable<transition_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:transition-group)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.transition_2, };
                }
                return $$res;
            });
    }
    public matchvBind($$dpth: number, $$cr?: ErrorTracker): Nullable<vBind> {
        return this.run<vBind>($$dpth,
            () => {
                let $$res: Nullable<vBind> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-bind)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vBind, };
                }
                return $$res;
            });
    }
    public matchvCloak($$dpth: number, $$cr?: ErrorTracker): Nullable<vCloak> {
        return this.run<vCloak>($$dpth,
            () => {
                let $$res: Nullable<vCloak> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-cloak)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vCloak, };
                }
                return $$res;
            });
    }
    public matchvElse($$dpth: number, $$cr?: ErrorTracker): Nullable<vElse> {
        return this.choice<vElse>([
            () => this.matchvElse_1($$dpth + 1, $$cr),
            () => this.matchvElse_2($$dpth + 1, $$cr),
        ]);
    }
    public matchvElse_1($$dpth: number, $$cr?: ErrorTracker): Nullable<vElse_1> {
        return this.run<vElse_1>($$dpth,
            () => {
                let $$res: Nullable<vElse_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-else)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vElse_1, };
                }
                return $$res;
            });
    }
    public matchvElse_2($$dpth: number, $$cr?: ErrorTracker): Nullable<vElse_2> {
        return this.run<vElse_2>($$dpth,
            () => {
                let $$res: Nullable<vElse_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-else-if)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vElse_2, };
                }
                return $$res;
            });
    }
    public matchvFor($$dpth: number, $$cr?: ErrorTracker): Nullable<vFor> {
        return this.run<vFor>($$dpth,
            () => {
                let $$res: Nullable<vFor> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-for)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vFor, };
                }
                return $$res;
            });
    }
    public matchvHtml($$dpth: number, $$cr?: ErrorTracker): Nullable<vHtml> {
        return this.run<vHtml>($$dpth,
            () => {
                let $$res: Nullable<vHtml> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-html)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vHtml, };
                }
                return $$res;
            });
    }
    public matchvIf($$dpth: number, $$cr?: ErrorTracker): Nullable<vIf> {
        return this.run<vIf>($$dpth,
            () => {
                let $$res: Nullable<vIf> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-if)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vIf, };
                }
                return $$res;
            });
    }
    public matchvModel($$dpth: number, $$cr?: ErrorTracker): Nullable<vModel> {
        return this.run<vModel>($$dpth,
            () => {
                let $$res: Nullable<vModel> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-model)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vModel, };
                }
                return $$res;
            });
    }
    public matchvOn($$dpth: number, $$cr?: ErrorTracker): Nullable<vOn> {
        return this.choice<vOn>([
            () => this.matchvOn_1($$dpth + 1, $$cr),
            () => this.matchvOn_2($$dpth + 1, $$cr),
        ]);
    }
    public matchvOn_1($$dpth: number, $$cr?: ErrorTracker): Nullable<vOn_1> {
        return this.run<vOn_1>($$dpth,
            () => {
                let $$res: Nullable<vOn_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-on)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vOn_1, };
                }
                return $$res;
            });
    }
    public matchvOn_2($$dpth: number, $$cr?: ErrorTracker): Nullable<vOn_2> {
        return this.run<vOn_2>($$dpth,
            () => {
                let $$res: Nullable<vOn_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-once)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vOn_2, };
                }
                return $$res;
            });
    }
    public matchvPre($$dpth: number, $$cr?: ErrorTracker): Nullable<vPre> {
        return this.run<vPre>($$dpth,
            () => {
                let $$res: Nullable<vPre> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-pre)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vPre, };
                }
                return $$res;
            });
    }
    public matchvShow($$dpth: number, $$cr?: ErrorTracker): Nullable<vShow> {
        return this.run<vShow>($$dpth,
            () => {
                let $$res: Nullable<vShow> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-show)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vShow, };
                }
                return $$res;
            });
    }
    public matchvText($$dpth: number, $$cr?: ErrorTracker): Nullable<vText> {
        return this.run<vText>($$dpth,
            () => {
                let $$res: Nullable<vText> = null;
                if (true
                    && this.regexAccept(String.raw`(?:v-text)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vText, };
                }
                return $$res;
            });
    }
    public matchvRouterView($$dpth: number, $$cr?: ErrorTracker): Nullable<vRouterView> {
        return this.run<vRouterView>($$dpth,
            () => {
                let $$res: Nullable<vRouterView> = null;
                if (true
                    && this.regexAccept(String.raw`(?:router-view)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vRouterView, };
                }
                return $$res;
            });
    }
    public matchvTo($$dpth: number, $$cr?: ErrorTracker): Nullable<vTo> {
        return this.run<vTo>($$dpth,
            () => {
                let $$res: Nullable<vTo> = null;
                if (true
                    && this.regexAccept(String.raw`(?:to)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vTo, };
                }
                return $$res;
            });
    }
    public matchvSrc($$dpth: number, $$cr?: ErrorTracker): Nullable<vSrc> {
        return this.run<vSrc>($$dpth,
            () => {
                let $$res: Nullable<vSrc> = null;
                if (true
                    && this.regexAccept(String.raw`(?::src)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vSrc, };
                }
                return $$res;
            });
    }
    public matchvStyle($$dpth: number, $$cr?: ErrorTracker): Nullable<vStyle> {
        return this.run<vStyle>($$dpth,
            () => {
                let $$res: Nullable<vStyle> = null;
                if (true
                    && this.regexAccept(String.raw`(?::style)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vStyle, };
                }
                return $$res;
            });
    }
    public matchvClass($$dpth: number, $$cr?: ErrorTracker): Nullable<vClass> {
        return this.run<vClass>($$dpth,
            () => {
                let $$res: Nullable<vClass> = null;
                if (true
                    && this.regexAccept(String.raw`(?::class)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.vClass, };
                }
                return $$res;
            });
    }
    public matchid($$dpth: number, $$cr?: ErrorTracker): Nullable<id> {
        return this.run<id>($$dpth,
            () => {
                let $$res: Nullable<id> = null;
                if (true
                    && this.regexAccept(String.raw`(?:id)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.id, };
                }
                return $$res;
            });
    }
    public matchtype($$dpth: number, $$cr?: ErrorTracker): Nullable<type> {
        return this.run<type>($$dpth,
            () => {
                let $$res: Nullable<type> = null;
                if (true
                    && this.regexAccept(String.raw`(?:type)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.type, };
                }
                return $$res;
            });
    }
    public matchname($$dpth: number, $$cr?: ErrorTracker): Nullable<name> {
        return this.run<name>($$dpth,
            () => {
                let $$res: Nullable<name> = null;
                if (true
                    && this.regexAccept(String.raw`(?:name)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.name, };
                }
                return $$res;
            });
    }
    public matchplaceholder($$dpth: number, $$cr?: ErrorTracker): Nullable<placeholder> {
        return this.run<placeholder>($$dpth,
            () => {
                let $$res: Nullable<placeholder> = null;
                if (true
                    && this.regexAccept(String.raw`(?:placeholder)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.placeholder, };
                }
                return $$res;
            });
    }
    public matchvalue($$dpth: number, $$cr?: ErrorTracker): Nullable<value> {
        return this.run<value>($$dpth,
            () => {
                let $$res: Nullable<value> = null;
                if (true
                    && this.regexAccept(String.raw`(?:value)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.value, };
                }
                return $$res;
            });
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchhtmlVueElement(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResultHtmlAndVue {
        const mrk = this.mark();
        const res = this.matchhtmlVueElement(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchhtmlVueElement(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResultHtmlAndVue {
    const p = new HtmlAndVueParser(s);
    return p.parse();
}
export interface ParseResultHtmlAndVue {
    ast: Nullable<htmlVueElement>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}